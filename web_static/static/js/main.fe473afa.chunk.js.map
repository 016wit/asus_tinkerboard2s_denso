{"version":3,"sources":["Component/Label.js","Component/HeartBeat.js","Action/types.js","Action/index.js","Pages/Display.js","Component/LineGraph.js","Pages/Graph.js","Component/TabPanel.js","Component/LineConfig.js","Component/BreakTimeConfig.js","Component/ActualConfig.js","Component/TimeConfig.js","Reducers/ConfigReducer.js","Component/SystemConfig.js","Component/DialogWrapper.js","Component/AlertDialog.js","Pages/Config.js","Pages/DisplayApp.js","Component/SingleDIsplayPanel.js","Component/NormalizedGraph.js","Component/PiChartGraph.js","Component/OrPiChartGraph.js","Pages/SingleDisplay.js","Pages/SingleConfig.js","route.js","App.js","Reducers/RootReducer.js","Reducers/JobReducer.js","Reducers/index.js","Api/httpClient.js","Sagas/jobsSagas.js","Sagas/configSagas.js","Sagas/index.js","Store/index.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","fullHeight","height","textCenter","textAlign","textBold","fontWeight","Label","props","classes","Grid","container","direction","justify","alignItems","className","item","Typography","variant","clsx","text","defaultProps","position","top","right","width","borderRadius","boxShadow","bgRed","backgroundColor","bgGreen","propTypes","pulse","PropTypes","bool","HeartBeat","GET_CONFIG_FORM","FETCH_STATUS_ACTION_SUCCESS","FETCH_STATUS_ACTION_FAIL","CONFIG_FORM_SELECT","CMD_SUCCESS_DIALOG","CMD_ERROR_DIALOG","CONFIG_FORM_CHANGE","CONFIG_FORM_TIME_CHANGE","FETCH_STATUS_STATE","SAVE_CONFIG","SAVE_CONFIG_INSTANT","SET_ACTUAL","SET_DATE_TIME","SWITCH_PAGE","getConfig","type","types","fetchStatus","configFormSelect","select","payload","actionFetchStatusSuccess","result","actionFetchStatusFail","configFormChange","name","value","configTimeChange","idx","cmdSuccessDialog","cmd","title","message","cmdErrorDialog","setActual","instant","setDateTime","saveConfig","saveConfigInstant","DisplayPage","timer","switchTimer","state","currentTime","moment","format","this","setInterval","setState","clearInterval","clearTimeout","e","job1","job2","tt1","tt2","lineName","heartBeat","threshold1","threshold2","Fragment","xs","sm","fullBorder","href","textYellow","textBoldMedium","target","numberText","resultText","ppPlan","actual","diff","att","lossTime","React","Component","connect","jobReducer","configReducer","entities","line1","line2","infoForm","switchTime","length","tt","threashold","withStyles","color","border","borderStyle","borderWidth","fontSize","withRouter","textContainer","paddingRight","chartContainer","LineGraph","useState","chartInstant","setChartInstant","chartRef","useRef","useEffect","createChart","destroy","updateChart","graph","createData","canvas","ctx","getContext","redGradient","createLinearGradient","addColorStop","greenGradient","labels","Object","keys","datasets","label","fill","lineTension","borderColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","values","map","x","parseInt","current","chartIns","Chart","options","plugins","legend","display","annotation","annotations","drawTime","yMin","yMax","enabled","content","scales","ticks","y","max","min","grid","update","ref","style","GraphPage","showAll","setTimeout","register","annotationPlugin","graphContainer","TabPanel","children","index","other","role","hidden","id","aria-labelledby","Box","p","paper","padding","spacing","textField","minWidth","labelInput","inputBaseRoot","marginTop","inputText","helperText","LineConfig","form","onChange","Paper","elevation","TextField","fullWidth","margin","InputLabelProps","InputProps","input","cpc","shortBreakDownThreshold","FormHelperTextProps","breakDownThreshold","meetingThreshold","resetTime","resetNighttime","daytimeStart","nighttimeStart","prototype","func","object","checkBoxWrapper","textRight","button","minHeight","BreakTimeConfig","renderOption","group","FormControlLabel","control","Checkbox","checked","event","labelPlacement","placeholder","itemD","itemN","daytime","nighttime","ActualConfig","onSubmit","Button","onClick","DateTimeConfig","date","time","startIcon","INIT_STATE","selectIns","currentIns","dialog","failure","success","marginLeft","SystemConfig","onSave","onHome","DialogWrapper","fullScreen","handleClose","handleSave","open","maxWidth","showCloseBtn","showSaveBtn","actionLayout","actionExtra","saveText","cancelText","showDivider","customAction","Dialog","onClose","disableBackdropClick","DialogTitle","headerWrapper","head","dialogHeadRoot","IconButton","aria-label","closeButton","Divider","DialogContent","divider","DialogActions","cancelButton","withMobileDialog","breakpoint","paddingBottom","marginBottom","AlertDialog","handlerSave","dialogContent","ConfigPage","tabIndex","handlerFormChange","bind","searchParams","URLSearchParams","history","location","search","get","newValue","Container","replace","console","log","AppBar","Tabs","handleChange","Tab","tabText","renderSystemPanel","renderPanel","successDialog","failureDialog","dialogTitle","dialogMessage","DisplayApp","currentPath","count","Display","Graph","rootReducer","currentPage","rootBorder","breakpoints","down","textHeader","SingleDisplayPanel","threshold","number","NormalizedGraph","graphData","run","lost","meeting","shortBreakdown","productDataSet","totalSec","reduce","acc","breakTimeN","downN","lostN","meetingN","runN","shortBreakdownN","customLabelTooltipCallback","context","dataset","parsed","formattedValue","window","matchMedia","font","size","matches","weight","tooltip","callbacks","xAlign","yAlign","stacked","dataSet","slice","toString","padStart","PiChartGraph","breakTime","hoverOffset","total","dataIndex","toFixed","aspectRatio","OrPiChartGraph","percentage","SingleDisplay","reload","job","lg","wrap","productionLineText","gutterBottom","lineText","overflow","paddingTop","marginRight","route","publicRoute","path","exact","component","privateRoute","App","publicMenu","routes","render","from","to","auth","reducers","combineReducers","action","newState","last","lineData","camelcaseKeysDeep","lineGraph","rspData","system","backendConfig","axios","create","baseURL","origin","timeout","server","clientId","clientSecrect","rootSaga","call","a","api","req","response","put","all","fork","takeLatest","fetchConfig","saveConfigIns","line_name","switch_time","params","reset_time","reset_nighttime","daytime_start","nighttime_start","short_break_down_threshold","break_down_threshold","meeting_threshold","throttle","jobsSaga","configSaga","sagaMiddleware","createSagaMiddleware","middlewares","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","store","initialState","createStore","composeWithDevTools","applyMiddleware","runSagaTask","sagaTask","RootSaga","configureStore","document","getElementById"],"mappings":"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","file":"static/js/main.fe473afa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from \"clsx\";\n//==================================== MUI-IMPORT ====================================================================//\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    fullHeight: {\n        height: \"100%\"\n    },\n    textCenter: {\n        textAlign: 'center'\n    },\n    textBold: {\n        fontWeight: '600'\n    },\n}));\n//==================================== Class definition ==============================================================//\nconst Label = (props) => {\n    const classes = useStyles();\n\n    return (\n        <Grid container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n              className={classes.fullHeight}\n        >\n            <Grid item>\n                <Typography variant={props.variant}\n                            className={clsx(classes.textCenter,\n                                classes.textBold, props.classes?.text)}\n                >\n                    {props.text}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n//==================================== Component props ===============================================================//\nLabel.propTypes = {\n    variant: PropTypes.string,\n    text: PropTypes.string,\n    classes: PropTypes.object\n}\n\nLabel.defaultProps = {\n    variant: 'h3',\n    text: \"\",\n    classes: null\n};\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default Label;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from \"clsx\";\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Label from \"./Label\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"fixed\",\n        top: 10,\n        right: 10,\n        width: 35,\n        height: 35,\n        borderRadius: 20,\n        boxShadow: \"0 0 10px 8px rgba(255, 255, 255, 0.2), 0 0 20px 8px rgba(255, 255, 255, 0.19)\"\n    },\n    bgRed: {\n        backgroundColor: 'red'\n    },\n    bgGreen: {\n        backgroundColor: 'green'\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst HeartBeat = (props) => {\n    const classes = useStyles();\n    const {pulse} = props;\n    return (\n        <div className={clsx(classes.root, pulse ? classes.bgRed : classes.bgGreen)}>\n\n        </div>\n    )\n}\n//==================================== Component props ===============================================================//\nLabel.propTypes = {\n    pulse: PropTypes.bool,\n}\n\nLabel.defaultProps = {\n    pulse: false,\n};\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default HeartBeat;\n\n\n\n","// General action\nexport const GET_CONFIG_FORM = '@@GET_CONFIG_FORM';\nexport const FETCH_STATUS_ACTION_SUCCESS = '@@FETCH_STATUS_ACTION_SUCCESS';\nexport const FETCH_STATUS_ACTION_FAIL = '@@ACTION_FETCH_STATUS_FAIL';\nexport const CONFIG_FORM_SELECT = '@@CONFIG_FORM_SELECT';\n// Dialog control action\nexport const CMD_SUCCESS_DIALOG = '@@CMD_SUCCESS_DIALOG';\nexport const CMD_ERROR_DIALOG = '@@CMD_ERROR_DIALOG';\n// Filter action\n// Form action\nexport const CONFIG_FORM_CHANGE = '@@CONFIG_FORM_CHANGE';\nexport const CONFIG_FORM_TIME_CHANGE = '@@CONFIG_FORM_TIME_CHANGE';\n// Extra action\nexport const FETCH_STATUS_STATE = '@@FETCH_STATUS_STATE';\nexport const SAVE_CONFIG = '@@SAVE_CONFIG';\nexport const SAVE_CONFIG_INSTANT = '@@SAVE_CONFIG_INSTANT';\nexport const SET_ACTUAL = '@@SET_ACTUAL';\nexport const SET_DATE_TIME = '@@SET_DATE_TIME';\nexport const SWITCH_PAGE = '@@SWITCH_PAGE';\n","import * as types from './types';\n//==================================== General action ================================================================//\nexport const getConfig = () => ({\n    type: types.GET_CONFIG_FORM\n})\nexport const fetchStatus = () => ({\n    type: types.FETCH_STATUS_STATE,\n});\nexport const configFormSelect = (select) => ({\n    type: types.CONFIG_FORM_SELECT,\n    payload: select\n});\nexport const actionFetchStatusSuccess = (result) => ({\n    type: types.FETCH_STATUS_ACTION_SUCCESS,\n    payload: result\n});\nexport const actionFetchStatusFail = (result) => ({\n    type: types.FETCH_STATUS_ACTION_FAIL,\n    payload: result\n});\n//==================================== Filter action =================================================================//\n//==================================== Form change ===================================================================//\nexport const configFormChange = (name, value) => ({\n    type: types.CONFIG_FORM_CHANGE,\n    payload: {name, value}\n});\nexport const configTimeChange = (name, type, idx, value) => ({\n    type: types.CONFIG_FORM_TIME_CHANGE,\n    payload: {name, type, idx, value}\n});\n//==================================== Dialog control action =========================================================//\nexport const cmdSuccessDialog = (cmd, title = '', message = '') => ({\n    type: types.CMD_SUCCESS_DIALOG,\n    payload: {cmd, title, message}\n});\nexport const cmdErrorDialog = (cmd, title = '', message = '') => ({\n    type: types.CMD_ERROR_DIALOG,\n    payload: {cmd, title, message}\n});\n//==================================== Extra action ==================================================================//\nexport const setActual = (instant) => ({\n    type: types.SET_ACTUAL,\n    payload: instant\n});\nexport const setDateTime = () => ({\n    type: types.SET_DATE_TIME,\n});\nexport const saveConfig = () => ({\n    type: types.SAVE_CONFIG\n})\nexport const saveConfigInstant = () => ({\n    type: types.SAVE_CONFIG_INSTANT\n})\nexport const getConfigInstant = (instant) => ({\n    type: types.GET_CONFIG_FORM,\n    payload: instant\n})\nexport const switchPage = (page) => ({\n    type: types.SWITCH_PAGE,\n    payload: page\n})\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {withRouter} from \"react-router\";\nimport moment from 'moment';\nimport clsx from \"clsx\";\n//==================================== MUI-IMPORT ====================================================================//\nimport {withStyles,} from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\nimport Label from \"../Component/Label\";\nimport HeartBeat from \"../Component/HeartBeat\";\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\nimport {\n    fetchStatus,\n    getConfig,\n} from \"../Action\";\n\n//==================================== Styles ========================================================================//\nconst styles = theme => ({\n    root: {\n        backgroundColor: 'black',\n        color: 'white',\n        height: '100vh'\n    },\n    textYellow: {\n        color: 'yellow'\n    },\n    textCenter: {\n        textAlign: 'center'\n    },\n    fullBorder: {\n        border: 'white',\n        borderStyle: 'solid',\n        borderWidth: '1px'\n    },\n    fullHeight: {\n        height: \"100%\"\n    },\n    textBold: {\n        fontWeight: '600'\n    },\n    textBoldMedium: {\n        fontWeight: '500'\n    },\n    resultText: {\n        fontSize: '10rem',\n    },\n    bgRed: {\n        backgroundColor: 'red'\n    },\n    numberText: {\n        fontSize: '3.5rem',\n        fontWeight: '500'\n    },\n    bgGreen: {\n        backgroundColor: \"green\",\n    }\n});\n\n//==================================== Class definition ==============================================================//\nclass DisplayPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.timer = null;\n        this.switchTimer = null;\n        this.state = {\n            currentTime: moment().format('YYYY-MM-DD HH:mm:ss')\n        }\n    }\n\n    componentDidMount() {\n        // this.props.getConfig();\n        this.props.fetchStatus();\n        this.timer = setInterval(() => {\n            this.props.fetchStatus();\n            this.setState({\n                currentTime: moment().format('YYYY-MM-DD HH:mm:ss')\n            })\n        }, 1000);\n        // this.switchTimer = setTimeout(() => {\n        //     clearTimeout(this.switchTimer);\n        //     this.props.history.replace('/graph');\n        // }, (parseInt(this.props.switchTime) * 1000));\n    }\n\n    componentWillUnmount() {\n        try {\n            clearInterval(this.timer);\n            clearTimeout(this.switchTimer);\n        } catch (e) {\n        }\n\n    }\n\n    render() {\n        const {classes, job1, job2, tt1, tt2, lineName, heartBeat, threshold1, threshold2} = this.props;\n\n        return (\n            <React.Fragment>\n                <HeartBeat pulse={heartBeat}/>\n                <Grid container\n                      direction=\"row\"\n                      justify=\"flex-start\"\n                      className={classes.root}\n                >\n                    <Grid item xs={12}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item sm={3} xs={12} className={classes.fullBorder}>\n                                <Label text={\n                                    <a href=\"/#/config\" className={classes.textYellow}>OPERATION RATIO</a>\n                                } variant=\"h3\" classes={{\n                                    text: clsx(classes.textYellow, classes.textBoldMedium)\n                                }}/>\n                            </Grid>\n                            <Grid item sm={9} xs={12} className={clsx(classes.fullBorder, classes.fullHeight)}>\n                                <Grid container className={classes.fullHeight}>\n                                    <Grid item xs={12} sm={6} className={clsx(classes.fullBorder)}>\n                                        <Label variant=\"h2\" text={<a href=\"/#/config?ref=mor\" className={classes.textYellow}>{job1?.name}</a>}/>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} className={classes.fullBorder}>\n                                        <Label variant=\"h2\" text={<a href=\"/#/config?ref=lor\" className={classes.textYellow}>{job2?.name}</a>}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item sm={3} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Label text=\"% TARGET\" variant=\"h3\"/>\n                            </Grid>\n                            <Grid item sm={9} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Grid container className={classes.fullHeight}>\n                                    <Grid item xs={12} sm={6} className={clsx(classes.fullBorder)}>\n                                        <Label text={job1.target} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} className={classes.fullBorder}>\n                                        <Label text={job2.target} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item sm={3} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Label text=\"% RESULT\" variant=\"h3\"/>\n                            </Grid>\n                            <Grid item sm={9} xs={12} className={clsx(classes.fullBorder)}>\n                                <Grid container className={classes.fullHeight}>\n                                    <Grid item xs={12} sm={6}\n                                          className={clsx(classes.fullBorder, job1.result < threshold1 ? classes.bgRed : classes.bgGreen)}>\n                                        <Label text={job1.result} variant=\"h1\" classes={{\n                                            text: clsx(classes.resultText)\n                                        }}/>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6}\n                                          className={clsx(classes.fullBorder, job2.result < threshold2 ? classes.bgRed : classes.bgGreen)}>\n                                        <Label text={job2.result} variant=\"h1\" classes={{\n                                            text: clsx(classes.resultText)\n                                        }}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item sm={3} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Label text=\"PP Plan\" variant=\"h3\"/>\n                            </Grid>\n                            <Grid item sm={9} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Grid container className={classes.fullHeight}>\n                                    <Grid item xs={12} sm={6} className={clsx(classes.fullBorder)}>\n                                        <Label text={job1.ppPlan} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} className={classes.fullBorder}>\n                                        <Label text={job2.ppPlan} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item sm={3} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Label text=\"Actual\" variant=\"h3\"/>\n                            </Grid>\n                            <Grid item sm={9} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Grid container className={classes.fullHeight}>\n                                    <Grid item xs={12} sm={6} className={clsx(classes.fullBorder)}>\n                                        <Label text={job1.actual} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} className={classes.fullBorder}>\n                                        <Label text={job2.actual} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item sm={3} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Label text=\"DIFF\" variant=\"h3\"/>\n                            </Grid>\n                            <Grid item sm={9} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Grid container className={classes.fullHeight}>\n                                    <Grid item xs={12} sm={6} className={clsx(classes.fullBorder)}>\n                                        <Label text={job1.diff} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} className={classes.fullBorder}>\n                                        <Label text={job2.diff} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item sm={3} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Label text=\"ATT.(Sec)\" variant=\"h3\"/>\n                            </Grid>\n                            <Grid item sm={9} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Grid container className={classes.fullHeight}>\n                                    <Grid item xs={12} sm={6} className={clsx(classes.fullBorder)}>\n                                        <Label text={job1.att} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} className={classes.fullBorder}>\n                                        <Label text={job2.att} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item sm={3} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Label text=\" Loss Time (h:m:s)\" variant=\"h4\"/>\n                            </Grid>\n                            <Grid item sm={9} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Grid container className={classes.fullHeight}>\n                                    <Grid item xs={12} sm={6} className={clsx(classes.fullBorder)}>\n                                        <Label text={job1.lossTime} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} className={classes.fullBorder}>\n                                        <Label text={job2.lossTime} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item sm={3} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Label text=\" TT.(Sec)\" variant=\"h4\"/>\n                            </Grid>\n                            <Grid item sm={9} xs={12}\n                                  className={clsx(classes.fullBorder, classes.textCenter, classes.fullHeight)}>\n                                <Grid container className={classes.fullHeight}>\n                                    <Grid item xs={12} sm={6} className={clsx(classes.fullBorder)}>\n                                        <Label text={tt1} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6} className={classes.fullBorder}>\n                                        <Label text={tt2} variant=\"h3\" classes={{\n                                            text: clsx(classes.numberText)\n                                        }}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} className={classes.fullBorder}>\n                        <Grid container className={classes.fullHeight}>\n                            <Grid item xs={12} sm={3} className={clsx(classes.fullBorder)}>\n                                <Label text={this.state.currentTime} variant=\"h4\" classes={{\n                                    text: clsx(classes.textYellow, classes.textBoldMedium)\n                                }}/>\n                            </Grid>\n                            <Grid item xs={12} sm={9} className={classes.fullBorder}>\n                                <Label text={lineName} variant=\"h3\" classes={{\n                                    text: clsx(classes.textYellow, classes.textBoldMedium)\n                                }}/>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </React.Fragment>\n        )\n    }\n}\n\n//==================================== Component props ===============================================================//\n//==================================== Redux map props ===============================================================//\nconst mapStateToProps = ({jobReducer, configReducer}) => ({\n    job1: jobReducer.entities.line1,\n    job2: jobReducer.entities.line2,\n    lineName: configReducer.infoForm.lineName,\n    switchTime: configReducer.infoForm.switchTime,\n    heartBeat: jobReducer.entities.line1.heartBeat,\n    tt1: configReducer.entities.length > 0 ? configReducer.entities[0]?.tt : 0,\n    tt2: configReducer.entities.length > 0 ? configReducer.entities[1]?.tt : 0,\n    threshold1: configReducer.entities.length > 0 ? configReducer.entities[0]?.threashold : 0,\n    threshold2: configReducer.entities.length > 0 ? configReducer.entities[1]?.threashold : 0\n})\n//==================================== Export ========================================================================//\nexport default connect((mapStateToProps), {\n    fetchStatus,\n    getConfig\n})(withStyles(styles)(withRouter(DisplayPage)));\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\n\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport {Bar} from 'react-chartjs-2';\nimport Grid from \"@material-ui/core/Grid\";\nimport {Chart,} from \"chart.js\";\nimport Typography from \"@material-ui/core/Typography\";\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    textContainer: {\n        position: \"absolute\",\n        top: 120,\n        right: 0,\n        width: \"100%\",\n        textAlign: \"right\",\n        paddingRight: 16\n    },\n    text: {\n        fontSize: \"12rem\",\n        fontWeight: \"bolder\"\n    },\n    chartContainer: {\n        position: \"relative\",\n        height: \"100%\",\n        width: \"100%\"\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst LineGraph = (props) => {\n    const [chartInstant, setChartInstant] = React.useState(null);\n    const classes = useStyles();\n    const chartRef = React.useRef();\n\n    React.useEffect(() => {\n        createChart();\n        return () => {\n            if (chartInstant) {\n                chartInstant.destroy();\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        updateChart();\n\n    }, [props.graph]);\n\n    const createData = (canvas) => {\n        const ctx = canvas.getContext(\"2d\")\n        const redGradient = ctx.createLinearGradient(0, 0, 0, 800);\n        redGradient.addColorStop(0, 'rgba(255,0,0,1)');\n        redGradient.addColorStop(0.5, 'rgba(255,69,0,0.7)');\n        redGradient.addColorStop(1, 'rgba(255,255,255,0)');\n\n        const greenGradient = ctx.createLinearGradient(0, 0, 0, 800);\n        greenGradient.addColorStop(0, 'rgba(124,252,0,1)');\n        greenGradient.addColorStop(0.5, 'rgba(124,252,0,0.7)');\n        greenGradient.addColorStop(1, 'rgba(255,255,255,0)');\n        return {\n            labels: Object.keys(props?.graph || {\n                \"08:00\": 0, \"09:00\": 0\n            }),\n            datasets: [\n                {\n                    type: 'line',\n                    // showLine: true,\n                    label: 'actual',\n                    fill: true,\n                    lineTension: 0.2,\n                    borderWidth: 2,\n                    backgroundColor: props.result >= 90 ? greenGradient : redGradient,\n                    borderColor: \"rgba(255,255,255, 1)\",\n                    pointBorderColor: \"rgba(255,255,255)\",\n                    pointBackgroundColor: \"rgba(255,255,255, 0)\",\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 1,\n                    pointHoverBackgroundColor: \"rgba(255,255,255)\",\n                    pointHoverBorderColor: \"rgba(220,220,220,1)\",\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 0,\n                    pointHitRadius: 10,\n                    data: [...Object.values(props.graph).map(x => parseInt(x))],\n                },\n            ],\n        }\n    }\n\n    const createChart = () => {\n        if (chartRef.current) {\n            if (!chartInstant) {\n                const chartIns = new Chart(chartRef.current, {\n                    type: \"line\",\n                    data: createData(chartRef.current),\n                    options: {\n                        // animation: false,\n                        plugins: {\n                            legend: {\n                                display: false\n                            },\n                            annotation: {\n                                annotations: {\n                                    line1: {\n                                        drawTime: 'afterDraw',\n                                        type: 'line',\n                                        yMin: props?.threashold || 90,\n                                        yMax: props?.threashold || 90,\n                                        borderColor: 'yellow',\n                                        borderWidth: 3,\n\n                                        label: {\n                                            enabled: true,\n                                            content: `% ${props?.threashold || 90} Threashold`,\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        scales: {\n                            x: {\n                                ticks: {\n                                    color: \"white\",\n                                }\n                            },\n                            y: {\n                                max: 120,\n                                min: 0,\n                                grid: {\n                                    display: true,\n                                    color: \"rgba(255,255,255, 0.3)\"\n                                },\n                                ticks: {\n                                    color: \"white\",\n                                }\n                            },\n                        },\n                    }\n                });\n                setChartInstant(chartIns);\n            }\n        }\n    }\n\n    const updateChart = () => {\n        if (chartInstant) {\n            try {\n                const canvas = chartRef.current;\n                const ctx = canvas.getContext(\"2d\");\n                const redGradient = ctx.createLinearGradient(0, 0, 0, 1000);\n                redGradient.addColorStop(0, 'rgba(255,0,0,1)');\n                redGradient.addColorStop(0.5, 'rgba(255,69,0,0.7)');\n                redGradient.addColorStop(1, 'rgba(255,255,255,0)');\n\n                const greenGradient = ctx.createLinearGradient(0, 0, 0, 1000);\n                greenGradient.addColorStop(0, 'rgba(124,252,0,1)');\n                greenGradient.addColorStop(0.5, 'rgba(124,252,0,0.7)');\n                greenGradient.addColorStop(1, 'rgba(255,255,255,0)');\n                chartInstant.data.labels = Object.keys(props?.graph || {\n                    \"08:00\": 0, \"09:00\": 0\n                });\n                chartInstant.data.datasets[0].data = [...Object.values(props.graph).map(x => x)];\n                chartInstant.data.datasets[0].backgroundColor = props.result >= 90 ? greenGradient : redGradient;\n                chartInstant.update();\n            } catch (e) {}\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className={classes.chartContainer}>\n                <canvas ref={chartRef} style={{width: \"100%\", height: \"100%\"}}/>\n            </div>\n            {/*<div className={classes.textContainer}>*/}\n            {/*    <Typography variant=\"h1\" className={classes.text}>*/}\n            {/*        {props.result} %*/}\n            {/*    </Typography>*/}\n            {/*</div>*/}\n        </React.Fragment>\n\n    );\n}\n//==================================== Component props ===============================================================//\n\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default LineGraph;\n\n\n\n","import React from 'react';\nimport {withRouter} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport moment from 'moment';\nimport clsx from \"clsx\";\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {withStyles,} from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\nimport 'chartjs-plugin-annotation';\nimport {Chart} from 'chart.js';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport {Bar} from 'react-chartjs-2';\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\nimport {\n    fetchStatus\n} from \"../Action\";\nimport LineGraph from \"../Component/LineGraph\";\nimport HeartBeat from \"../Component/HeartBeat\";\n//==================================== Styles ========================================================================//\nconst styles = theme => ({\n    root: {\n        backgroundColor: 'black',\n        color: 'white',\n        height: '100vh'\n    },\n    textYellow: {\n        color: 'yellow'\n    },\n    fullHeight: {\n        height: '100%'\n    },\n    textBold: {\n        fontWeight: '600'\n    },\n    textCenter: {\n        textAlign: 'center'\n    },\n    graphContainer: {\n        position: 'relative'\n    }\n});\n\n\n//==================================== Class definition ==============================================================//\nclass GraphPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.timer = null;\n        this.switchTimer = null;\n        this.state = {\n            showAll: false\n        }\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(() => {\n            this.props.fetchStatus();\n        }, 1000);\n        this.switchTimer = setTimeout(() => {\n            clearTimeout(this.switchTimer);\n            this.setState({\n                showAll: true\n            })\n        }, 1000);\n    }\n\n    componentWillMount() {\n        Chart.register(annotationPlugin);\n    }\n\n    componentWillUnmount() {\n        try {\n            clearInterval(this.timer);\n            clearTimeout(this.switchTimer);\n        } catch (e) {}\n\n    }\n\n    render() {\n        const {classes, job1, job2, threshold1 ,threshold2, heartBeat} = this.props;\n        // console.log(\"Page render\");\n        return (\n            <React.Fragment>\n                <HeartBeat pulse={heartBeat}/>\n                <Grid container\n                      direction=\"row\"\n                      justify=\"flex-start\"\n                      className={classes.root}\n                >\n                    <Grid item xs={12}>\n                        <Grid container>\n                            <Grid item xs={12}>\n                                <Typography variant=\"h1\" className={clsx(classes.textCenter, classes.textBold)}>\n                                    <a href=\"/#/config?ref=mor\" className={classes.textYellow}>{job1?.name}</a>\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} className={classes.graphContainer}>\n                                <LineGraph {...job1} threashold={threshold1}/>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container>\n                            <Grid item xs={12}>\n                                <Typography variant=\"h1\" className={clsx(classes.textCenter, classes.textBold)}>\n                                    <a href=\"/#/config?ref=lor\" className={classes.textYellow}>{job2?.name}</a>\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} className={classes.graphContainer}>\n                                <LineGraph {...job2} threashold={threshold2}/>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                </Grid>\n            </React.Fragment>\n\n        );\n    }\n}\n\n//==================================== Component props ===============================================================//\n\n//==================================== Redux map props ===============================================================//\nconst mapStateToProps = ({jobReducer, configReducer}) => ({\n    job1: jobReducer.entities.line1,\n    job2: jobReducer.entities.line2,\n    heartBeat: jobReducer.entities.line1.heartBeat,\n    switchTime: configReducer.infoForm.switchTime,\n    threshold1: configReducer.entities.length > 0 ?  configReducer.entities[0]?.threashold : 0,\n    threshold2: configReducer.entities.length > 0 ?  configReducer.entities[1]?.threashold : 0\n})\n//==================================== Export ========================================================================//\nexport default connect(mapStateToProps, {\n    fetchStatus\n})(withStyles(styles)(withRouter(GraphPage)));\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Box} from \"@material-ui/core\";\n//==================================== MUI-IMPORT ====================================================================//\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\n\n//==================================== Class definition ==============================================================//\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\n\n//==================================== Component props ===============================================================//\nTabPanel.propTypes = {\n    index: PropTypes.number,\n    children: PropTypes.node\n};\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default TabPanel;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2)\n    },\n    textField: {\n        minWidth: 160\n    },\n    labelInput: {\n        fontSize: \"1.7rem\",\n        color: \"black\"\n    },\n    inputBaseRoot: {\n        marginTop: \"32px !important\"\n    },\n    inputText: {\n        fontSize: \"1.4rem\"\n    },\n    helperText: {\n        fontSize: \"1.2rem\",\n        color: \"black\"\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst LineConfig = (props) => {\n    const classes = useStyles();\n    const {form, onChange} = props;\n\n    return (\n        <Paper elevation={2} className={classes.paper}>\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h4\">\n                        Config Data Default\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Line Name\"\n                               name=\"lineName\"\n                               value={form?.lineName}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Threashold\"\n                               name=\"threashold\"\n                               value={form?.threashold}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"TT. (Sec)\"\n                               name=\"tt\"\n                               value={form?.tt}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Count/Cycle\"\n                               name=\"cpc\"\n                               value={form?.cpc}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Short breakdown threshold\"\n                               name=\"shortBreakDownThreshold\"\n                               value={form?.shortBreakDownThreshold}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"Sec\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Breakdown threshold\"\n                               name=\"breakDownThreshold\"\n                               value={form?.breakDownThreshold}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"Sec\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField fullWidth\n                               label=\"Flu & Other\"\n                               name=\"meetingThreshold\"\n                               value={form?.meetingThreshold}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"Sec\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Reset day time\"\n                               name=\"resetTime\"\n                               value={form?.resetTime}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"HH:MM:SS\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Reset night time\"\n                               name=\"resetNightTime\"\n                               value={form?.resetNighttime}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"HH:MM:SS\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Day time start\"\n                               name=\"dayTimeStart\"\n                               value={form?.daytimeStart}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"HH:MM:SS\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Night time start\"\n                               name=\"nightTimeStart\"\n                               value={form?.nighttimeStart}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"HH:MM:SS\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n\n            </Grid>\n        </Paper>\n    )\n};\n//==================================== Component props ===============================================================//\nLineConfig.prototype = {\n    onChange: PropTypes.func,\n    form: PropTypes.object\n};\n\n\nLineConfig.defaultProps = {\n    onChange: () => false,\n    form: {}\n};\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default LineConfig;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2)\n    },\n    textCenter: {\n        textAlign: \"center\"\n    },\n    checkBoxWrapper: {\n        marginTop: 24\n    },\n    textRight: {\n        textAlign: \"right\"\n    },\n    button: {\n        minHeight: 60,\n        minWidth: 160\n    },\n    labelInput: {\n        fontSize: \"1.5rem\",\n        color: \"black\"\n    },\n    inputBaseRoot: {\n        marginTop: \"24px !important\"\n    },\n    inputText: {\n        fontSize: \"1.2rem\"\n    },\n    helperText: {\n        fontSize: \"1rem\",\n        color: \"black\"\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst BreakTimeConfig = (props) => {\n    const classes = useStyles();\n    const {form, onChange} = props;\n\n    const handleTimeCheck = (idx, type, value) => {\n\n    }\n\n    const renderOption = (idx, group, data) => {\n        return (\n            <Grid container>\n                <Grid item xs={2} className={classes.checkBoxWrapper}>\n                    <FormControlLabel\n                        value=\"start\"\n                        control={<Checkbox color=\"primary\"\n                                           checked={data ? (data['act'] === \"on\") : false}\n                                           onChange={(event) => {\n                                               onChange(group, 'act', idx, event.target.checked ? \"on\" : null)\n                                           }}\n                        />}\n                        label={idx}\n                        labelPlacement=\"start\"\n\n                    />\n                </Grid>\n                <Grid item xs={5}>\n                    <TextField label=\"Start\"\n                               name={`time_1_${idx}`}\n                               value={data ? data['1'] : ''}\n                               margin=\"normal\"\n                               placeholder=\"00:00:00\"\n                               onChange={(event) => onChange(group, '1', idx, event.target.value)}\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={5}>\n                    <TextField label=\"End\"\n                               name={`time_2_${idx}`}\n                               value={data ? data['2'] : ''}\n                               margin=\"normal\"\n                               onChange={(event) => onChange(group, '2', idx, event.target.value)}\n                               placeholder=\"00:00:00\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                    />\n                </Grid>\n            </Grid>\n        )\n    }\n\n    return (\n        <Paper elevation={2} className={classes.paper}>\n            <Grid container spacing={1}>\n                <Grid item xs={6}>\n                    <Typography variant=\"h4\" className={classes.textCenter}>\n                        Day Break\n                    </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                    <Typography variant=\"h4\" className={classes.textCenter}>\n                       Night Break\n                    </Typography>\n                </Grid>\n                {\n                    [1,2,3,4,5,6,7,8].map((x, idx) => {\n                        let itemD;\n                        let itemN;\n                        if (form?.daytime) {\n                            try {\n                                itemD = form?.daytime[`${x}`]\n                            } catch (e) {}\n                        }\n\n                        if (form?.nighttime) {\n                            try {\n                                itemN = form?.nighttime[`${x}`]\n                            } catch (e) {}\n                        }\n                        return (\n                            <Grid container key={idx}>\n                                <Grid item xs={6}>\n                                    {renderOption(x, \"daytime\", itemD)}\n                                </Grid>\n                                <Grid item xs={6}>\n                                    {renderOption(x, \"nighttime\", itemN)}\n                                </Grid>\n                            </Grid>\n                        );\n                    })\n                }\n            </Grid>\n        </Paper>\n    );\n};\n//==================================== Component props ===============================================================//\nBreakTimeConfig.prototype = {\n    onChange: PropTypes.func,\n    form: PropTypes.object\n};\n\n\nBreakTimeConfig.defaultProps = {\n    onChange: () => false,\n    form: {}\n};\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default BreakTimeConfig;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2)\n    },\n    textField: {\n        minWidth: 160\n    },\n    textRight: {\n        textAlign: \"right\"\n    },\n    button: {\n        minHeight: 60,\n        minWidth: 160\n    },\n    labelInput: {\n        fontSize: \"2rem\",\n        color: \"black\"\n    },\n    inputBaseRoot: {\n        marginTop: \"32px !important\"\n    },\n    inputText: {\n        fontSize: \"1.4rem\"\n    },\n    helperText: {\n        fontSize: \"1.2rem\",\n        color: \"black\"\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst ActualConfig = (props) => {\n    const classes = useStyles();\n    const {form, onChange, data, onSubmit} = props;\n\n    return (\n        <Paper elevation={2} className={classes.paper}>\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h4\">\n                        Force actual\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                    <TextField fullWidth\n                               label=\"Actual\"\n                               name=\"actual\"\n                               value={form?.actual}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText={`current = ${data?.actual}, PP Plan = ${data?.ppPlan}`}\n                               type=\"number\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} className={classes.textRight}>\n                    <Button variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.button}\n                            onClick={onSubmit}\n                    >\n                        SET ACTUAL\n                    </Button>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n};\n//==================================== Component props ===============================================================//\nActualConfig.prototype = {\n    onChange: PropTypes.func,\n    onSubmit: PropTypes.func,\n    form: PropTypes.object\n};\n\n\nActualConfig.defaultProps = {\n    onChange: () => false,\n    form: {},\n    onSubmit: () => false,\n};\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default ActualConfig;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n//==================================== Icon ==========================================================================//\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder';\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2)\n    },\n    textField: {\n        minWidth: 160\n    },\n    textRight: {\n        textAlign: \"right\"\n    },\n    button: {\n        minHeight: 60,\n        minWidth: 160\n    },\n    labelInput: {\n        fontSize: \"2rem\",\n        color: \"black\"\n    },\n    inputBaseRoot: {\n        marginTop: \"32px !important\"\n    },\n    inputText: {\n        fontSize: \"2rem\"\n    },\n    helperText: {\n        fontSize: \"1.2rem\",\n        color: \"black\"\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst DateTimeConfig = (props) => {\n    const classes = useStyles();\n    const {form, onChange} = props;\n\n    return (\n        <Paper elevation={2} className={classes.paper}>\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h4\">\n                        Date/Time setting\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Date\"\n                               name=\"date\"\n                               value={form?.date}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"YYYY-MM-DD\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField fullWidth\n                               label=\"Time\"\n                               name=\"time\"\n                               value={form?.time}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"HH:MM:SS\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.textRight}>\n                <Button variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        startIcon={<QueryBuilderIcon fontSize=\"large\"/>}\n                        onClick={props.onSubmit}\n                >\n                    SET Date/Time\n                </Button>\n            </Grid>\n        </Paper>\n    )\n};\n//==================================== Component props ===============================================================//\nDateTimeConfig.prototype = {\n    onChange: PropTypes.func,\n    onSubmit: PropTypes.func,\n    form: PropTypes.object\n};\n\n\nDateTimeConfig.defaultProps = {\n    onChange: () => false,\n    onSubmit: () => false,\n    form: {}\n};\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default DateTimeConfig;\n\n\n\n","import camelcaseKeysDeep from 'camelcase-keys-deep';\nimport {\n    FETCH_STATUS_ACTION_FAIL,\n    FETCH_STATUS_ACTION_SUCCESS,\n    FETCH_STATUS_STATE,\n    CONFIG_FORM_CHANGE,\n    GET_CONFIG_FORM,\n    CMD_SUCCESS_DIALOG,\n    CMD_ERROR_DIALOG,\n    CONFIG_FORM_SELECT,\n    CONFIG_FORM_TIME_CHANGE\n} from \"../Action/types\";\nimport moment from \"moment\";\n\n\nconst INIT_STATE = {\n    selectIns: {},\n    currentIns: 0,\n    entities: [],\n    infoForm: {\n        lineName: '',\n        switchTime: 15,\n        threashold: \"\",\n        tt: 0,\n        cpc: 0,\n        resetTime: \"\",\n        resetNighttime: \"\",\n        daytimeStart: \"\",\n        nighttimeStart: \"\",\n        date: moment().format(\"YYYY-MM-DD\"),\n        time: moment().format(\"HH:mm:ss\"),\n        shortBreakDownThreshold: 100,\n        breakDownThreshold: 300,\n        meetingThreshold: 1800\n    },\n    dialog: {\n        failure: false,\n        success: false,\n        title: 'Header',\n        message: 'message',\n    }\n};\n\nexport default (state = INIT_STATE, action) => {\n    let newState = {...state};\n    const {payload} = action;\n    switch (action.type) {\n        case CONFIG_FORM_SELECT:\n            newState.currentIns = payload - 1;\n            if (newState.entities.length > 0) {\n                newState.selectIns = {\n                    ...newState.entities[newState.currentIns]\n                }\n                newState.infoForm = {\n                    ...newState.infoForm,\n                    ...newState.entities[newState.currentIns]\n                }\n            }\n            break;\n        case CONFIG_FORM_TIME_CHANGE:\n            newState.infoForm = {\n                ...newState.infoForm,\n            };\n            newState.infoForm[payload.name][payload.idx][payload.type] = payload.value;\n            break;\n        case CONFIG_FORM_CHANGE:\n            newState.infoForm = {\n                ...newState.infoForm,\n                [payload.name]: payload.value\n            };\n            break;\n        case CMD_SUCCESS_DIALOG:\n            newState.dialog = {\n                ...newState.dialog,\n                success: payload.cmd,\n                title: payload.title,\n                message: payload.message\n            };\n            break;\n        case CMD_ERROR_DIALOG:\n            newState.dialog = {\n                ...newState.dialog,\n                failure: payload.cmd,\n                title: payload.title,\n                message: payload.message\n            };\n            break;\n        case FETCH_STATUS_ACTION_SUCCESS:\n            switch (payload.last) {\n                case GET_CONFIG_FORM:\n                    const rspData = camelcaseKeysDeep(payload.result);\n                    newState.entities = rspData.data;\n                    newState.infoForm = {\n                        ... newState.infoForm,\n                        lineName: rspData.system.lineName,\n                        switchTime: parseInt(rspData.system.switchTime)\n                    }\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case FETCH_STATUS_ACTION_FAIL:\n            switch (payload.last) {\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return newState;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport QueryBuilderIcon from \"@material-ui/icons/QueryBuilder\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport clsx from \"clsx\";\nimport HomeIcon from \"@material-ui/icons/Home\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2)\n    },\n    textField: {\n        minWidth: 160\n    },\n    textRight: {\n        textAlign: \"right\"\n    },\n    button: {\n        minHeight: 60,\n        minWidth: 160\n    },\n    marginLeft: {\n        marginLeft: 16\n    },\n    labelInput: {\n        fontSize: \"2rem\",\n        color: \"black\"\n    },\n    inputBaseRoot: {\n        marginTop: \"32px !important\"\n    },\n    inputText: {\n        fontSize: \"2rem\"\n    },\n    helperText: {\n        fontSize: \"1.2rem\",\n        color: \"black\"\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst SystemConfig = (props) => {\n    const classes = useStyles();\n    const {form, onChange} = props;\n\n    return (\n        <Paper elevation={2} className={classes.paper}>\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h4\">\n                        Config Data Default\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField fullWidth\n                               label=\"Line Name\"\n                               name=\"lineName\"\n                               value={form?.lineName}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField fullWidth\n                               label=\"Switch page timer\"\n                               name=\"switchTime\"\n                               value={form?.switchTime}\n                               margin=\"normal\"\n                               onChange={onChange}\n                               helperText=\"sec.\"\n                               type=\"number\"\n                               InputLabelProps={{\n                                   classes: {\n                                       root: classes.labelInput\n                                   }\n                               }}\n                               InputProps={{\n                                   classes: {\n                                       root: classes.inputBaseRoot,\n                                       input: classes.inputText\n\n                                   }\n                               }}\n                               FormHelperTextProps={{\n                                   classes: {\n                                       root: classes.helperText\n                                   }\n                               }}\n                    />\n                </Grid>\n                <Grid item xs={12} className={classes.textRight}>\n                    <Button variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.button}\n                            startIcon={<SaveIcon style={{ fontSize: 40 }}/>}\n                            onClick={props.onSave}\n                    >\n                        SAVE CHANGE\n                    </Button>\n                    <Button variant=\"contained\"\n                            color=\"primary\"\n                            className={clsx(classes.button, classes.marginLeft)}\n                            startIcon={<HomeIcon style={{ fontSize: 40 }}/>}\n                            onClick={props.onHome}\n                    >\n                        HOME\n                    </Button>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n};\n//==================================== Component props ===============================================================//\nSystemConfig.prototype = {\n    onChange: PropTypes.func,\n    form: PropTypes.object,\n    onSave: PropTypes.func,\n    onHome: PropTypes.func,\n};\n\n\nSystemConfig.defaultProps = {\n    onChange: () => false,\n    form: {},\n    onSave: () => false,\n    onHome: () => false,\n};\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default SystemConfig;\n\n\n\n","import React, {Component} from 'react';\nimport clsx from \"clsx\";\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from \"@material-ui/core/Grid\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport withMobileDialog from '@material-ui/core/withMobileDialog';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Divider from \"@material-ui/core/Divider\";\n\nconst useStyle = theme => ({\n    headerWrapper: {\n        paddingBottom: 0,\n    },\n    dialogHeadRoot: {\n        minHeight: 45,\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: \"red\",\n    },\n    divider: {\n        width: \"100%\",\n        marginTop: 12,\n        marginBottom: 4\n    },\n    cancelButton: {\n        marginLeft: theme.spacing(1),\n    }\n});\n\nclass DialogWrapper extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const {\n            classes, fullScreen, handleClose, handleSave, open, title, maxWidth, showCloseBtn, showSaveBtn,\n            actionLayout, actionExtra, saveText, cancelText, showDivider, className, customAction\n        } = this.props;\n        return (\n            <Dialog\n                fullWidth\n                fullScreen={fullScreen}\n                maxWidth={maxWidth}\n                open={open}\n                onClose={handleClose}\n                disableBackdropClick\n                aria-labelledby=\"responsive-dialog-title\"\n            >\n                <DialogTitle id=\"responsive-dialog-title\" className={clsx(classes.headerWrapper, className?.head)}>\n                    <Grid container\n                          justify=\"space-between\"\n                          className={classes.dialogHeadRoot}\n                    >\n                        <Grid item>\n                            {title}\n                        </Grid>\n                        {showCloseBtn ?\n                            (\n                                <Grid item>\n                                    <IconButton aria-label=\"Close\"\n                                                className={classes.closeButton}\n                                                onClick={handleClose}\n                                    >\n                                        <CloseIcon/>\n                                    </IconButton>\n                                </Grid>\n                            ) : null\n                        }\n                    </Grid>\n                </DialogTitle>\n                <Divider/>\n                <DialogContent>\n                    {this.props.children}\n                </DialogContent>\n                {showDivider && <Divider className={classes.divider}/>}\n                {\n                    customAction ?\n                        (customAction) : (\n                            <DialogActions>\n                                <Grid container\n                                      justify={actionLayout}\n                                      spacing={2}\n                                >\n                                    {actionExtra && (\n                                        <Grid item>\n                                            {actionExtra}\n                                        </Grid>\n                                    )}\n                                    <Grid item>\n                                        {\n                                            showSaveBtn ?\n                                                (\n                                                    <Button onClick={handleSave} variant=\"contained\" color=\"secondary\">\n                                                        {saveText}\n                                                    </Button>\n                                                ) : null\n                                        }\n                                        <Button onClick={handleClose}\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                className={classes.cancelButton}\n                                        >\n                                            {cancelText}\n                                        </Button>\n                                    </Grid>\n\n                                </Grid>\n                            </DialogActions>\n                        )\n                }\n            </Dialog>\n        )\n    }\n}\n\n\nDialogWrapper.propTypes = {\n    classes: PropTypes.object.isRequired,\n    handleClose: PropTypes.func,\n    handleSave: PropTypes.func,\n    title: PropTypes.string,\n    maxWidth: PropTypes.string,\n    fullScreen: PropTypes.bool,\n    showCloseBtn: PropTypes.bool,\n    showSaveBtn: PropTypes.bool,\n    open: PropTypes.bool,\n    actionExtra: PropTypes.any,\n    actionLayout: PropTypes.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']),\n    saveText: PropTypes.string,\n    cancelText: PropTypes.string,\n    showDivider: PropTypes.bool,\n    className: PropTypes.object,\n    customAction: PropTypes.element,\n};\n\nDialogWrapper.defaultProps = {\n    handleClose: () => false,\n    handleSave: () => false,\n    title: \"Title\",\n    maxWidth: 'sm',\n    showCloseBtn: false,\n    showSaveBtn: true,\n    actionExtra: null,\n    actionLayout: 'flex-end',\n    saveText: \"Save\",\n    cancelText: \"Cancel\",\n    showDivider: true,\n    customAction: null\n};\n\n\nexport default withMobileDialog({breakpoint: 'sm'})(withStyles(useStyle)(DialogWrapper));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport DialogWrapper from \"./DialogWrapper\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n    },\n    dialogContent: {\n        minHeight: 80\n    }\n});\n\n\nclass AlertDialog extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handlerSave() {\n        if (this.props.onSave) {\n            this.props.onSave();\n        }\n    }\n\n    render() {\n        const {\n            classes,\n            onClose,\n            onSave,\n            title,\n            message\n        } = this.props;\n\n        return (\n            <DialogWrapper open={this.props.open}\n                           showCloseBtn\n                           showSaveBtn={false}\n                           showDivider={false}\n                           cancelText={\"OK\"}\n                           maxWidth={this.props.maxWidth}\n                           title={title}\n                           handleClose={onClose}\n                           handleSave={() => this.handlerSave()}\n            >\n                <div className={classes.dialogContent}>\n                    <Typography variant=\"subtitle1\">\n                        {message}\n                    </Typography>\n                </div>\n            </DialogWrapper>\n        );\n    }\n}\n\nAlertDialog.propTypes = {\n    classes: PropTypes.object.isRequired,\n    onClose: PropTypes.func,\n    onSave: PropTypes.func,\n    title: PropTypes.string,\n    message: PropTypes.string,\n    maxWidth: PropTypes.string\n};\n\nAlertDialog.defaultProps = {\n    message: \"TEXT\",\n    maxWidth: 'sm'\n};\n\nexport default withStyles(styles)(AlertDialog);\n","import React from 'react';\nimport {withRouter} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport moment from 'moment';\nimport clsx from \"clsx\";\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {withStyles,} from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Typography from '@material-ui/core/Typography';\nimport Button from \"@material-ui/core/Button\";\nimport Container from '@material-ui/core/Container';\n//==================================== Icon ==========================================================================//\nimport SaveIcon from '@material-ui/icons/Save';\nimport HomeIcon from '@material-ui/icons/Home';\n//==================================== App component =================================================================//\nimport TabPanel from \"../Component/TabPanel\";\nimport LineConfig from \"../Component/LineConfig\";\nimport BreakTimeConfig from \"../Component/BreakTimeConfig\";\nimport ActualConfig from \"../Component/ActualConfig\";\nimport DateTimeConfig from \"../Component/TimeConfig\";\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\nimport {\n    configFormChange,\n    configFormSelect,\n    configTimeChange,\n    getConfig,\n    saveConfig,\n    cmdSuccessDialog,\n    cmdErrorDialog,\n    saveConfigInstant,\n    fetchStatus,\n    setActual,\n    setDateTime,\n} from \"../Action\";\nimport TextField from \"@material-ui/core/TextField\";\nimport configReducer from \"../Reducers/ConfigReducer\";\nimport SystemConfig from \"../Component/SystemConfig\";\nimport AlertDialog from \"../Component/AlertDialog\";\n\n\n//==================================== Styles ========================================================================//\nconst styles = theme => ({\n    root: {\n        height: \"100vh\",\n    },\n    fullHeight: {\n        height: '100%'\n    },\n    textBold: {\n        fontWeight: '600'\n    },\n    textCenter: {\n        textAlign: 'center'\n    },\n    graphContainer: {\n        position: 'relative'\n    },\n    textRight: {\n        textAlign: \"right\"\n    },\n    button: {\n        minHeight: 60,\n        minWidth: 160\n    },\n    tabText: {\n        fontSize: \"xx-large\"\n    },\n    marginLeft: {\n        marginLeft: 16\n    }\n});\n\n//==================================== Class definition ==============================================================//\nclass ConfigPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabIndex: 0\n        };\n        this.handlerFormChange = this.handlerFormChange.bind(this);\n    }\n\n    componentDidMount() {\n        let searchParams = new URLSearchParams(this.props.history.location.search);\n        if (searchParams.get(\"ref\") === \"mor\") {\n            this.props.configFormSelect(1);\n            this.setState({\n                tabIndex: 1\n            });\n        } else if (searchParams.get(\"ref\") === \"lor\") {\n            this.props.configFormSelect(2);\n            this.setState({\n                tabIndex: 2\n            });\n        }\n        this.props.getConfig();\n        this.props.fetchStatus();\n    }\n\n    handleChange(event, newValue) {\n        if (newValue !== 0) {\n            this.props.configFormSelect(newValue);\n        }\n        this.setState({\n            tabIndex: newValue\n        });\n    };\n\n    handlerFormChange(event) {\n        const {name, value} = event.target;\n        this.props.configFormChange(name, value);\n    }\n\n    renderSystemPanel() {\n        const {form} = this.props;\n        return (\n            <Container maxWidth=\"sm\">\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <SystemConfig form={form}\n                                      onChange={this.handlerFormChange}\n                                      onHome={() => this.props.history.replace('/display')}\n                                      onSave={this.props.saveConfig}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DateTimeConfig form={form}\n                                        onChange={this.handlerFormChange}\n                                        onSubmit={this.props.setDateTime}\n                        />\n                    </Grid>\n                </Grid>\n\n            </Container>\n        )\n    }\n\n    renderPanel() {\n        const {classes, form, currentIns, job1, job2} = this.props;\n        console.log(form);\n        return (\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <LineConfig form={form}\n                                        onChange={this.handlerFormChange}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <ActualConfig form={form}\n                                          data={currentIns === 1 ? job2 : job1}\n                                          onChange={this.handlerFormChange}\n                                          onSubmit={this.props.setActual}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <BreakTimeConfig form={form}\n                                             onChange={(name, type, idx, value) => this.props.configTimeChange(name, type, idx, value)}/>\n                        </Grid>\n                        <Grid item xs={12} className={classes.textRight}>\n                            <Button variant=\"contained\"\n                                    color=\"secondary\"\n                                    className={classes.button}\n                                    startIcon={<SaveIcon style={{fontSize: 40}}/>}\n                                    onClick={this.props.saveConfigInstant}\n                            >\n                                SAVE CHANGE\n                            </Button>\n                            <Button variant=\"contained\"\n                                    color=\"primary\"\n                                    className={clsx(classes.button, classes.marginLeft)}\n                                    startIcon={<HomeIcon style={{fontSize: 40}}/>}\n                                    onClick={() => this.props.history.replace('/display')}\n                            >\n                                HOME\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n\n            </Grid>\n        )\n    }\n\n    render() {\n        const {classes} = this.props;\n        const {tabIndex} = this.state;\n        return (\n            <Box className={classes.root}>\n                <AppBar position=\"static\" color=\"default\">\n                    <Tabs value={tabIndex}\n                          variant=\"fullWidth\"\n                          onChange={this.handleChange.bind(this)}\n                    >\n                        <Tab label=\"SYSTEM\" id=\"tab-inx-0\" className={classes.tabText}/>\n                        <Tab label=\"MOR\" id=\"tab-inx-1\" className={classes.tabText}/>\n                        <Tab label=\"LOR\" id=\"tab-inx-2\" className={classes.tabText}/>\n                    </Tabs>\n                </AppBar>\n                <TabPanel value={tabIndex} index={0}>\n                    {this.renderSystemPanel()}\n                </TabPanel>\n                <TabPanel value={tabIndex} index={1}>\n                    {this.renderPanel()}\n                </TabPanel>\n                <TabPanel value={tabIndex} index={2}>\n                    {this.renderPanel()}\n                </TabPanel>\n                <AlertDialog open={this.props.successDialog || this.props.failureDialog}\n                             maxWidth={'xs'}\n                             title={this.props.dialogTitle}\n                             message={this.props.dialogMessage}\n                             onClose={() => {\n                                 if (this.props.successDialog) {\n                                     this.props.cmdSuccessDialog(false);\n                                 } else {\n                                     this.props.cmdErrorDialog(false);\n\n                                 }\n                             }}\n                />\n            </Box>\n        );\n    }\n}\n\n//==================================== Component props ===============================================================//\n\n//==================================== Redux map props ===============================================================//\nconst mapStateToProps = ({jobReducer, configReducer}) => ({\n    job1: jobReducer.entities.line1,\n    job2: jobReducer.entities.line2,\n    form: configReducer.infoForm,\n    currentIns: configReducer.currentIns,\n    successDialog: configReducer.dialog.success,\n    failureDialog: configReducer.dialog.failure,\n    dialogTitle: configReducer.dialog.title,\n    dialogMessage: configReducer.dialog.message,\n})\n//==================================== Export ========================================================================//\nexport default connect(mapStateToProps, {\n    configFormSelect,\n    configFormChange,\n    configTimeChange,\n    getConfig,\n    saveConfig,\n    cmdSuccessDialog,\n    cmdErrorDialog,\n    saveConfigInstant,\n    fetchStatus,\n    setActual,\n    setDateTime\n})(withStyles(styles)(withRouter(ConfigPage)));\n\n\n\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport routes from \"../route\";\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport Display from \"./Display\";\nimport Graph from \"./Graph\";\n//==================================== MUI-IMPORT ====================================================================//\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\nimport {\n    fetchStatus,\n    getConfig,\n} from \"../Action\";\n//==================================== Styles ========================================================================//\nconst styles = theme => ({});\n\n//==================================== Class definition ==============================================================//\nclass DisplayApp extends Component {\n    constructor(props) {\n        super(props);\n        this.timer = null;\n        this.switchTimer = null;\n        this.state = {\n            currentPath: 'display',\n        }\n    }\n\n    componentDidMount() {\n        const {switchTime,} = this.props;\n        let count = 0;\n        this.props.getConfig();\n        this.switchTimer = setInterval(() => {\n            if (++count >= switchTime) {\n                // if (this.state.currentPath === \"graph\") {\n                //     window.location.reload();\n                // } else {\n                //     this.setState({\n                //         currentPath: this.state.currentPath === \"display\" ? \"graph\" : \"display\"\n                //     })\n                // }\n                this.setState({\n                    currentPath: this.state.currentPath === \"display\" ? \"graph\" : \"display\"\n                })\n                count = 0;\n            }\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.switchTimer);\n    }\n\n    render() {\n        return this.state.currentPath ===  \"display\" ? <Display /> : <Graph />\n    }\n}\n\n//==================================== Component props ===============================================================//\n\n//==================================== Redux map props ===============================================================//\nconst mapStateToProps = ({rootReducer, configReducer}) => {\n    return {\n        currentPage: rootReducer.currentPage,\n        switchTime: configReducer.infoForm.switchTime,\n    };\n};\n//==================================== Export ========================================================================//\nexport default connect(mapStateToProps, {\n    getConfig\n})(DisplayApp);\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Label from \"./Label\";\nimport clsx from \"clsx\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: 'black',\n        color: 'white',\n        height: '100%'\n    },\n    textYellow: {\n        color: 'yellow'\n    },\n    textCenter: {\n        textAlign: 'center'\n    },\n    fullBorder: {\n        border: 'white',\n        borderStyle: 'solid',\n        borderWidth: '1px'\n    },\n    rootBorder: {\n        border: 'white',\n        borderStyle: 'solid',\n        borderWidth: '2px'\n    },\n    fullHeight: {\n        height: \"100%\"\n    },\n    textBold: {\n        fontWeight: '600'\n    },\n    textBoldMedium: {\n        fontWeight: '500'\n    },\n    resultText: {\n        fontSize: '9rem',\n        [theme.breakpoints.down('lg')]: {\n            fontSize: '7rem',\n        },\n    },\n    bgRed: {\n        backgroundColor: 'red'\n    },\n    numberText: {\n        fontSize: '3.5rem',\n        fontWeight: '500',\n        [theme.breakpoints.down('lg')]: {\n            fontSize: '2rem',\n        },\n    },\n    bgGreen: {\n        backgroundColor: \"green\",\n    },\n    textHeader: {\n        [theme.breakpoints.down('lg')]: {\n            fontSize: '2.5rem',\n        },\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst SingleDisplayPanel = (props) => {\n    const classes = useStyles();\n    return (\n        <Grid container className={clsx(classes.fullHeight, classes.rootBorder)}>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Label text={\n                    <a href=\"/#/single_config\" className={classes.textYellow}>OPERATION RATIO</a>\n                } variant=\"h3\" classes={{\n                    text: clsx(classes.textYellow, classes.textBoldMedium)\n                }}/>\n            </Grid>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Label text={props?.currentTime || \"-\"} variant=\"h3\" classes={{\n                    text: clsx(classes.textYellow, classes.textBoldMedium)\n                }}/>\n            </Grid>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Grid container className={classes.fullHeight}>\n                    <Grid item xs={6}\n                          className={clsx(classes.fullBorder,\n\n                              props?.result < props.threshold ? classes.bgRed : classes.bgGreen)}\n                    >\n                        <Label text=\"% RESULT\"\n                               variant=\"h2\"\n                               classes={{\n                                   text: clsx(classes.textHeader)\n                               }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}\n                          className={clsx(classes.fullBorder, props?.result < props.threshold ? classes.bgRed : classes.bgGreen)}\n                    >\n                        <Label text={props?.result || 0} variant=\"h1\"\n                               classes={{\n                                   text: clsx(classes.resultText)\n                               }}\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Grid container className={classes.fullHeight}>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text=\"TARGET\"\n                               variant=\"h3\"\n                               classes={{\n                                   text: clsx(classes.textHeader)\n                               }}\n                        />\n                    </Grid>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text={props?.target || 0} variant=\"h3\" classes={{\n                            text: clsx(classes.numberText)\n                        }}/>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Grid container className={classes.fullHeight}>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text=\"PP Plan\" variant=\"h3\"/>\n                    </Grid>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text={props?.ppPlan || 0} variant=\"h3\" classes={{\n                            text: clsx(classes.numberText)\n                        }}/>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Grid container className={classes.fullHeight}>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text=\"Actual\" variant=\"h3\"/>\n                    </Grid>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text={props?.actual || 0} variant=\"h3\" classes={{\n                            text: clsx(classes.numberText)\n                        }}/>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Grid container className={classes.fullHeight}>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text=\"Diff\" variant=\"h4\"/>\n                    </Grid>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text={props?.diff || 0} variant=\"h3\" classes={{\n                            text: clsx(classes.numberText)\n                        }}/>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Grid container className={classes.fullHeight}>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text=\"ATT.(Sec)\" variant=\"h4\"/>\n                    </Grid>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text={props?.att || 0} variant=\"h3\" classes={{\n                            text: clsx(classes.numberText)\n                        }}/>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Grid container className={classes.fullHeight}>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text=\"Loss Time (h:m:s)\" variant=\"h4\"/>\n                    </Grid>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text={props?.lossTime || 0} variant=\"h3\" classes={{\n                            text: clsx(classes.numberText)\n                        }}/>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.fullBorder}>\n                <Grid container className={classes.fullHeight}>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text=\"TT.(Sec)\" variant=\"h4\"/>\n                    </Grid>\n                    <Grid item xs={6} className={classes.fullBorder}>\n                        <Label text={props?.tt || 0} variant=\"h3\" classes={{\n                            text: clsx(classes.numberText)\n                        }}/>\n                    </Grid>\n                </Grid>\n            </Grid>\n\n        </Grid>\n    )\n}\n//==================================== Component props ===============================================================//\nSingleDisplayPanel.prototype = {\n    threshold: PropTypes.number,\n    result: PropTypes.number\n};\n\n\nSingleDisplayPanel.defaultProps = {\n    threshold: 90,\n    result: 0\n};\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default SingleDisplayPanel;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\nimport {Chart,} from \"chart.js\";\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    textContainer: {\n        position: \"absolute\",\n        top: 120,\n        right: 0,\n        width: \"100%\",\n        textAlign: \"right\",\n        paddingRight: 16\n    },\n    text: {\n        fontSize: \"12rem\",\n        fontWeight: \"bolder\"\n    },\n    chartContainer: {\n        position: \"relative\",\n        height: \"100%\",\n        width: \"100%\"\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst NormalizedGraph = (props) => {\n    const [chartInstant, setChartInstant] = React.useState(null);\n    const classes = useStyles();\n    const chartRef = React.useRef();\n    const graphData = React.useRef();\n\n    React.useEffect(() => {\n        createChart();\n        return () => {\n            if (chartInstant) {\n                chartInstant.destroy();\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        updateChart();\n        graphData.current = Object.values(props?.graphData || {}).map(x =>\n            [\n                x?.run,\n                (x?.lost || 0) + (x?.meeting || 0),\n                // x?.lost,\n                // x?.meeting,\n                x?.shortBreakdown,\n                x?.down,\n                // x?.breakTime,\n            ]);\n    }, [props.graphData]);\n\n    const productDataSet = () => {\n        const item = Object.values(props?.graphData || {}).map(x => {\n            const topic = [\n                // 'breakTime',\n                'down',\n                'lost',\n                'meeting',\n                'run',\n                'shortBreakdown'];\n            let totalSec = topic.reduce((acc, y) => {\n                if (x[y]) {\n                    acc += x[y]\n                }\n                return acc\n            }, 0)\n            totalSec = totalSec > 0 ? totalSec : 1;\n            return {\n                ...x,\n                breakTimeN: (x['breakTime'] / totalSec) * 100,\n                other: ((x['lost'] + x['meeting']) / totalSec) * 100,\n                downN: (x['down'] / totalSec) * 100,\n                lostN: (x['lost'] / totalSec) * 100,\n                meetingN: (x['meeting'] / totalSec) * 100,\n                runN: (x['run'] / totalSec) * 100,\n                shortBreakdownN: (x['shortBreakdown'] / totalSec) * 100\n            }\n\n        })\n        return {\n            labels: Object.keys(props?.graphData || {\n                \"08:00\": 0, \"09:00\": 0\n            }),\n            datasets: [\n                {\n                    type: 'bar',\n                    label: 'OR',\n                    backgroundColor: \"#40699C\",\n                    data: [...Object.values(item).map(x => x.runN)],\n                },\n                {\n                    type: 'bar',\n                    label: 'Flu & Other',\n                    backgroundColor: \"#9BBB59\",\n                    data: [...Object.values(item).map(x => x.other)],\n                },\n                {\n                    type: 'bar',\n                    label: 'SBM',\n                    backgroundColor: \"#E67E22\",\n                    data: [...Object.values(item).map(x => x.shortBreakdownN)],\n                },\n                {\n                    type: 'bar',\n                    label: 'BM',\n                    backgroundColor: \"#CE4335\",\n                    data: [...Object.values(item).map(x => x.downN)],\n                },\n\n                // {\n                //     type: 'bar',\n                //     label: 'MEETING',\n                //     backgroundColor: \"#FFF700\",\n                //     data: [...Object.values(item).map(x => x.meetingN)],\n                // },\n\n                // {\n                //     type: 'bar',\n                //     label: 'BREAK TIME',\n                //     backgroundColor: \"blue\",\n                //     data: [...Object.values(item).map(x => x.breakTimeN)],\n                // },\n\n            ],\n        }\n\n    }\n\n    const createData = (canvas) => {\n        return productDataSet()\n    }\n\n\n    const customLabelTooltipCallback = (context, ...args) => {\n        var label = context.dataset.label || '';\n\n        if (label) {\n            label += ': ';\n        }\n        // label += context.formattedValue;\n        if (context.parsed.y !== null) {\n            label += context.formattedValue + ' %';\n        }\n        // if (graphData.current.length) {\n        //     label += graphData.current[context.dataIndex][context.datasetIndex].toFixed(2);\n        // } else {\n        //     if (context.parsed.y !== null) {\n        //         label += context.formattedValue + '%';\n        //     }\n        // }\n        return label;\n    };\n\n    const createChart = () => {\n        const xs = window.matchMedia(\"(max-width: 1280px)\");\n        if (chartRef.current) {\n            if (!chartInstant) {\n                const chartIns = new Chart(chartRef.current, {\n                    type: \"bar\",\n                    data: createData(chartRef.current),\n                    options: {\n                        // animation: false,\n                        plugins: {\n                            legend: {\n                                display: true,\n                                labels: {\n                                    color: \"white\",\n                                    font: {\n                                        size: xs.matches ? 18 : 25,\n                                        weight: xs.matches ? 500 : 700,\n                                    }\n                                }\n                            },\n                            tooltip: {\n                                callbacks: {\n                                    label: customLabelTooltipCallback,\n                                },\n                                position: \"nearest\",\n                                xAlign: \"center\",\n                                yAlign: \"center\"\n                            },\n                            annotation: {\n                                annotations: {\n                                    line1: {\n                                        drawTime: 'afterDraw',\n                                        type: 'line',\n                                        yMin: props?.threashold || 90,\n                                        yMax: props?.threashold || 90,\n                                        borderColor: '#27AE60',\n                                        borderWidth: 5,\n                                        label: {\n                                            enabled: true,\n                                            content: `% ${props?.threashold || 90} Threashold`,\n                                            font: {\n                                                size: 16,\n                                            },\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        scales: {\n                            x: {\n                                stacked: true,\n                                ticks: {\n                                    color: \"white\",\n                                    font: {\n                                        size: xs.matches ? 20 : 40,\n                                        weight: xs.matches ? 300 : 500,\n                                    }\n                                }\n                            },\n                            y: {\n                                stacked: true,\n                                max: 100,\n                                min: 0,\n                                grid: {\n                                    display: true,\n                                    color: \"rgba(255,255,255, 0.3)\"\n                                },\n                                ticks: {\n                                    color: \"white\",\n                                    font: {\n                                        size: xs.matches ? 20 : 30,\n                                        weight: xs.matches ? 300 : 500,\n                                    }\n                                }\n                            },\n                        },\n                    }\n                });\n                setChartInstant(chartIns);\n            }\n        }\n    }\n\n    const updateChart = () => {\n        if (chartInstant) {\n            try {\n                const dataSet = productDataSet();\n                chartInstant.data.labels = dataSet.labels.map(x => {\n                    return `${x} - ${((parseInt(x.slice(0, 2)) % 24)+ 1).toString().padStart(2, '0')}:00`;\n                    }\n                );\n                chartInstant.data.datasets[0].data = [...dataSet.datasets[0].data];\n                chartInstant.data.datasets[1].data = [...dataSet.datasets[1].data];\n                chartInstant.data.datasets[2].data = [...dataSet.datasets[2].data];\n                chartInstant.data.datasets[3].data = [...dataSet.datasets[3].data];\n                // chartInstant.data.datasets[4].data = [...dataSet.datasets[4].data];\n                // chartInstant.data.datasets[5].data = [...dataSet.datasets[5].data];\n                chartInstant.update();\n            } catch (e) {\n            }\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className={classes.chartContainer}>\n                <canvas ref={chartRef} style={{width: \"100%\", height: \"100%\"}}/>\n            </div>\n\n        </React.Fragment>\n\n    );\n}\n//==================================== Component props ===============================================================//\nNormalizedGraph.prototype = {\n    graphData: PropTypes.object,\n};\n\nNormalizedGraph.defaultProps = {\n    graphData: {},\n}\n\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default NormalizedGraph;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\nimport {Chart,} from \"chart.js\";\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    textContainer: {\n        position: \"absolute\",\n        top: 120,\n        right: 0,\n        width: \"100%\",\n        textAlign: \"right\",\n        paddingRight: 16\n    },\n    text: {\n        fontSize: \"12rem\",\n        fontWeight: \"bolder\"\n    },\n    chartContainer: {\n        position: \"relative\",\n        height: \"100%\",\n        width: \"100%\"\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst PiChartGraph = (props) => {\n    const [chartInstant, setChartInstant] = React.useState(null);\n    const classes = useStyles();\n    const chartRef = React.useRef();\n    const graphData = React.useRef();\n\n    React.useEffect(() => {\n        createChart();\n        return () => {\n            if (chartInstant) {\n                chartInstant.destroy();\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        updateChart();\n        // graphData.current = Object.values(props?.graphData || {}).map(x =>\n        //     [\n        //         x?.run,\n        //         x?.lost,\n        //         x?.meeting,\n        //         x?.shortBreakdown,\n        //         x?.down,\n        //         x?.breakTime,\n        //     ]);\n    }, [props.graphData]);\n\n    const productDataSet = () => {\n        const item = Object.values(props?.graphData || {})\n        const data = item.reduce((x, y) => {\n            x[0] += y.run;\n            x[1] += y.lost;\n            x[2] += y.meeting;\n            x[3] += y.shortBreakdown;\n            x[4] += y.down;\n            x[5] += y.breakTime;\n            return x;\n        }, [0, 0, 0, 0, 0, 0]);\n        graphData.current = data;\n        return {\n            labels: ['RUN', 'LOST', 'MEETING', 'SHORT BREAKDOWN', 'DOWN', 'BREAK TIME'],\n            datasets: [\n                {\n                    label: 'Summary',\n                    backgroundColor: [\n                        \"green\", \"#e0acac\", \"yellow\", \"orange\", \"red\", \"blue\"\n                    ],\n                    hoverOffset: 10,\n                    data: data,\n                },\n            ],\n        }\n\n    }\n\n    const createData = (canvas) => {\n        return productDataSet()\n    }\n\n\n    const customLabelTooltipCallback = (context, ...args) => {\n        var label = context.dataset.label || '';\n\n        if (label) {\n            label += ': ';\n        }\n        if (graphData.current.length) {\n            const total = graphData.current.reduce((x, y) => x + y, 0);\n            const percentage = (graphData.current[context.dataIndex] / total) * 100\n            label += percentage.toFixed(2);\n        } else {\n            if (context.parsed.y !== null) {\n                label += context.formattedValue;\n            }\n        }\n        return `${label} %`;\n    };\n\n    const createChart = () => {\n        const xs = window.matchMedia(\"(max-width: 1280px)\");\n        if (chartRef.current) {\n            if (!chartInstant) {\n                const chartIns = new Chart(chartRef.current, {\n                    type: \"pie\",\n                    data: createData(chartRef.current),\n                    options: {\n                        // animation: false,\n                        aspectRatio: 1.5,\n                        plugins: {\n                            legend: {\n                                display: true,\n                                labels: {\n                                    color: \"white\",\n                                    font: {\n                                        size: xs.matches ? 15 : 30,\n                                        weight: xs.matches ? 600 : 900,\n                                    }\n                                }\n                            },\n                            tooltip: {\n                                callbacks: {\n                                    label: customLabelTooltipCallback\n                                }\n                            }\n                        },\n                        // scales: {\n                        //     x: {\n                        //         stacked: true,\n                        //         ticks: {\n                        //             color: \"white\",\n                        //             font: {\n                        //                 size: xs.matches ? 20 : 40,\n                        //                 weight: xs.matches ? 300 : 500,\n                        //             }\n                        //         }\n                        //     },\n                        //     y: {\n                        //         stacked: true,\n                        //         max: 100,\n                        //         min: 0,\n                        //         grid: {\n                        //             display: true,\n                        //             color: \"rgba(255,255,255, 0.3)\"\n                        //         },\n                        //         ticks: {\n                        //             color: \"white\",\n                        //             font: {\n                        //                 size: xs.matches ? 20 : 30,\n                        //                 weight: xs.matches ? 300 : 500,\n                        //             }\n                        //         }\n                        //     },\n                        // },\n                    }\n                });\n                setChartInstant(chartIns);\n            }\n        }\n    }\n\n    const updateChart = () => {\n        if (chartInstant) {\n            try {\n                const dataSet = productDataSet();\n                // chartInstant.data.labels = dataSet.labels;\n                chartInstant.data.datasets[0].data = [...dataSet.datasets[0].data];\n                chartInstant.update();\n            } catch (e) {\n            }\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className={classes.chartContainer}>\n                <canvas ref={chartRef} style={{width: \"100%\", height: \"100%\"}}/>\n            </div>\n\n        </React.Fragment>\n\n    );\n}\n//==================================== Component props ===============================================================//\nPiChartGraph.prototype = {\n    graphData: PropTypes.object,\n};\n\nPiChartGraph.defaultProps = {\n    graphData: {},\n}\n\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default PiChartGraph;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {makeStyles} from \"@material-ui/core/styles\";\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\nimport {Chart,} from \"chart.js\";\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst useStyles = makeStyles((theme) => ({\n    textContainer: {\n        position: \"absolute\",\n        top: 120,\n        right: 0,\n        width: \"100%\",\n        textAlign: \"right\",\n        paddingRight: 16\n    },\n    text: {\n        fontSize: \"12rem\",\n        fontWeight: \"bolder\"\n    },\n    chartContainer: {\n        position: \"relative\",\n        height: \"100%\",\n        width: \"100%\"\n    }\n}));\n//==================================== Class definition ==============================================================//\nconst OrPiChartGraph = (props) => {\n    const [chartInstant, setChartInstant] = React.useState(null);\n    const classes = useStyles();\n    const chartRef = React.useRef();\n    const graphData = React.useRef();\n\n    React.useEffect(() => {\n        createChart();\n        return () => {\n            if (chartInstant) {\n                chartInstant.destroy();\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        updateChart();\n    }, [props.graphData]);\n\n    const productDataSet = () => {\n        const item = Object.values(props?.graphData || {})\n        const data = item.reduce((x, y) => {\n            x[0] += y.run;\n            x[1] += y.lost;\n            x[2] += y.meeting;\n            x[3] += y.shortBreakdown;\n            x[4] += y.down;\n            return x;\n        }, [0, 0, 0, 0, 0]);\n        graphData.current = data;\n        return {\n            labels: ['RUN', 'LOST', 'MEETING', 'SHORT BREAKDOWN', 'DOWN'],\n            datasets: [\n                {\n                    label: 'Summary',\n                    backgroundColor: [\n                        \"green\", \"#e0acac\", \"yellow\", \"orange\", \"red\", \"blue\"\n                    ],\n                    hoverOffset: 10,\n                    data: data,\n                },\n            ],\n        }\n\n    }\n\n    const createData = (canvas) => {\n        return productDataSet()\n    }\n\n\n    const customLabelTooltipCallback = (context, ...args) => {\n        var label = context.dataset.label || '';\n\n        if (label) {\n            label += ': ';\n        }\n        if (graphData.current.length) {\n            const total = graphData.current.reduce((x, y) => x + y, 0);\n            const percentage = (graphData.current[context.dataIndex] / total) * 100\n            console.log(total, graphData.current);\n            label += percentage.toFixed(2);\n        } else {\n            if (context.parsed.y !== null) {\n                label += context.formattedValue;\n            }\n        }\n        return `${label} %`;\n    };\n\n    const createChart = () => {\n        const xs = window.matchMedia(\"(max-width: 1280px)\");\n        if (chartRef.current) {\n            if (!chartInstant) {\n                const chartIns = new Chart(chartRef.current, {\n                    type: \"pie\",\n                    data: createData(chartRef.current),\n                    options: {\n                        // animation: false,\n                        aspectRatio: 1.5,\n                        plugins: {\n                            legend: {\n                                display: true,\n                                labels: {\n                                    color: \"white\",\n                                    font: {\n                                        size: xs.matches ? 15 : 30,\n                                        weight: xs.matches ? 600 : 900,\n                                    }\n                                }\n                            },\n                            tooltip: {\n                                callbacks: {\n                                    label: customLabelTooltipCallback\n                                }\n                            }\n                        },\n                        // scales: {\n                        //     x: {\n                        //         stacked: true,\n                        //         ticks: {\n                        //             color: \"white\",\n                        //             font: {\n                        //                 size: xs.matches ? 20 : 40,\n                        //                 weight: xs.matches ? 300 : 500,\n                        //             }\n                        //         }\n                        //     },\n                        //     y: {\n                        //         stacked: true,\n                        //         max: 100,\n                        //         min: 0,\n                        //         grid: {\n                        //             display: true,\n                        //             color: \"rgba(255,255,255, 0.3)\"\n                        //         },\n                        //         ticks: {\n                        //             color: \"white\",\n                        //             font: {\n                        //                 size: xs.matches ? 20 : 30,\n                        //                 weight: xs.matches ? 300 : 500,\n                        //             }\n                        //         }\n                        //     },\n                        // },\n                    }\n                });\n                setChartInstant(chartIns);\n            }\n        }\n    }\n\n    const updateChart = () => {\n        if (chartInstant) {\n            try {\n                const dataSet = productDataSet();\n                chartInstant.data.datasets[0].data = [...dataSet.datasets[0].data];\n                chartInstant.update();\n            } catch (e) {\n            }\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className={classes.chartContainer}>\n                <canvas ref={chartRef} style={{width: \"100%\", height: \"100%\"}}/>\n            </div>\n\n        </React.Fragment>\n\n    );\n}\n//==================================== Component props ===============================================================//\nOrPiChartGraph.prototype = {\n    graphData: PropTypes.object,\n};\n\nOrPiChartGraph.defaultProps = {\n    graphData: {},\n}\n\n//==================================== Redux map props ===============================================================//\n\n//==================================== Export ========================================================================//\nexport default OrPiChartGraph;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {withRouter} from \"react-router\";\nimport moment from 'moment';\nimport clsx from \"clsx\";\n//==================================== MUI-IMPORT ====================================================================//\nimport {withStyles,} from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\nimport Label from \"../Component/Label\";\nimport HeartBeat from \"../Component/HeartBeat\";\nimport {connect} from \"react-redux\";\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\nimport {\n    fetchStatus,\n    getConfig\n} from \"../Action\";\nimport SingleDisplayPanel from \"../Component/SingleDIsplayPanel\";\nimport LineGraph from \"../Component/LineGraph\";\nimport Box from \"@material-ui/core/Box\";\nimport {Chart} from \"chart.js\";\nimport annotationPlugin from \"chartjs-plugin-annotation\";\nimport NormalizedGraph from \"../Component/NormalizedGraph\";\nimport Typography from \"@material-ui/core/Typography\";\nimport PiChartGraph from \"../Component/PiChartGraph\";\nimport OrPiChartGraph from \"../Component/OrPiChartGraph\";\n//==================================== Styles ========================================================================//\nconst styles = theme => ({\n    root: {\n        backgroundColor: 'black',\n        color: 'white',\n        height: '100vh',\n        [theme.breakpoints.down('md')]: {\n            overflow: \"scroll\"\n        },\n    },\n    textYellow: {\n        color: 'yellow'\n    },\n    textCenter: {\n        textAlign: 'center'\n    },\n    fullBorder: {\n        border: 'white',\n        borderStyle: 'solid',\n        borderWidth: '2px'\n    },\n    fullHeight: {\n        height: \"100%\"\n    },\n    textBold: {\n        fontWeight: '600'\n    },\n    textBoldMedium: {\n        fontWeight: '500'\n    },\n    resultText: {\n        fontSize: '10rem',\n    },\n    bgRed: {\n        backgroundColor: 'red'\n    },\n    numberText: {\n        fontSize: '3.5rem',\n        fontWeight: '500'\n    },\n    bgGreen: {\n        backgroundColor: \"green\",\n    },\n    fullWidth: {\n        width: \"100%\"\n    },\n    productionLineText: {\n        textAlign: \"right\",\n        paddingTop: theme.spacing(2),\n        paddingRight: 40\n    },\n    graphContainer: {\n        height: \"100%\",\n        padding: 8,\n        marginBottom: 4,\n        marginRight: 8,\n        marginLeft: 4,\n        minHeight: 600\n    },\n    lineText: {\n        fontSize: '5rem',\n        [theme.breakpoints.down('sm')]: {\n            fontSize: '2.5rem',\n        },\n    }\n});\n//==================================== Class definition ==============================================================//\nclass SingleDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.timer = null;\n        this.switchTimer = null;\n        this.state = {\n            display: 0,\n            currentTime: moment().format('YYYY-MM-DD HH:mm:ss')\n        }\n    }\n\n    componentDidMount() {\n        const {switchTime,} = this.props;\n        let count = 0;\n        // this.props.getConfig();\n        // this.props.fetchStatus();\n        this.timer = setInterval(() => {\n            this.props.fetchStatus();\n            if (++count >= 60 * 60) {\n                window.location.reload();\n                // if (this.state.display === 3) {\n                //     window.location.reload();\n                // }\n                // this.setState({\n                //     display: (this.state.display + 1) % 4\n                // })\n                count = 0;\n            }\n\n            this.setState({\n                currentTime: moment().format('YYYY-MM-DD HH:mm:ss')\n            })\n        }, 1000);\n    }\n\n    componentWillMount() {\n        this.props.getConfig();\n        this.props.fetchStatus();\n        Chart.register(annotationPlugin);\n    }\n\n    componentWillUnmount() {\n        try {\n            clearInterval(this.timer);\n            clearTimeout(this.switchTimer);\n        } catch (e) {\n        }\n    }\n\n    render() {\n        const {classes, heartBeat, job, tt, threshold, lineName} = this.props;\n        return (\n            <React.Fragment>\n                <HeartBeat pulse={heartBeat}/>\n                <Grid container\n                      alignItems=\"stretch\"\n                      className={classes.root}\n                >\n                    <Grid item xs={12} lg={4} style={{padding: 4}}>\n                        <SingleDisplayPanel {...job} tt={tt} threshold={threshold} currentTime={this.state.currentTime} />\n                    </Grid>\n                    <Grid item xs={12} lg={8}>\n                        <Grid container\n                              direction=\"row\"\n                              alignItems=\"stretch\"\n                              className={classes.fullHeight}\n                        >\n                            <Grid item xs={12}>\n                                <Grid container direction=\"column\"\n                                      wrap=\"nowrap\"\n                                      className={classes.fullHeight}>\n                                    <div className={clsx(classes.productionLineText)}>\n                                        <Typography variant=\"h2\" gutterBottom className={classes.lineText}>\n                                            {lineName || \"LINE\"}\n                                        </Typography>\n                                    </div>\n                                    <div className={clsx(classes.fullBorder, classes.graphContainer)}>\n                                        <NormalizedGraph {...job} threashold={threshold} />\n                                        {/*<LineGraph {...job} threashold={threshold} />*/}\n                                        {/*{this.state.display === 0 && (<LineGraph {...job} threashold={threshold} />)}*/}\n                                        {/*{this.state.display === 1 && (<NormalizedGraph {...job} threashold={threshold} />)}*/}\n                                        {/*{this.state.display === 2 && (<PiChartGraph {...job} threashold={threshold} />)}*/}\n                                        {/*{this.state.display === 3 && (<OrPiChartGraph {...job} threashold={threshold} />)}*/}\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n}\n//==================================== Component props ===============================================================//\n//==================================== Redux map props ===============================================================//\nconst mapStateToProps = ({jobReducer, configReducer}) => ({\n    job: jobReducer.entities.line1,\n    lineName: configReducer.infoForm.lineName,\n    switchTime: configReducer.infoForm.switchTime,\n    heartBeat: jobReducer.entities.line1.heartBeat,\n    tt: configReducer.entities.length > 0 ? configReducer.entities[0]?.tt : 0,\n    threshold: configReducer.entities.length > 0 ? configReducer.entities[0]?.threashold : 0,\n})\n//==================================== Export ========================================================================//\nexport default connect((mapStateToProps), {\n    fetchStatus,\n    getConfig\n})(withStyles(styles)(withRouter(SingleDisplay)));\n\n\n\n\n","import React from 'react';\nimport {withRouter} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport moment from 'moment';\nimport clsx from \"clsx\";\nimport PropTypes from 'prop-types';\n//==================================== MUI-IMPORT ====================================================================//\nimport {withStyles,} from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Typography from '@material-ui/core/Typography';\nimport Button from \"@material-ui/core/Button\";\nimport Container from '@material-ui/core/Container';\n//==================================== Icon ==========================================================================//\nimport SaveIcon from '@material-ui/icons/Save';\nimport HomeIcon from '@material-ui/icons/Home';\n//==================================== App component =================================================================//\nimport TabPanel from \"../Component/TabPanel\";\nimport LineConfig from \"../Component/LineConfig\";\nimport BreakTimeConfig from \"../Component/BreakTimeConfig\";\nimport ActualConfig from \"../Component/ActualConfig\";\nimport DateTimeConfig from \"../Component/TimeConfig\";\n//==================================== Utility =======================================================================//\n//==================================== Redux action ==================================================================//\nimport {\n    configFormChange,\n    configFormSelect,\n    configTimeChange,\n    getConfig,\n    saveConfig,\n    cmdSuccessDialog,\n    cmdErrorDialog,\n    saveConfigInstant,\n    fetchStatus,\n    setActual,\n    setDateTime,\n} from \"../Action\";\nimport TextField from \"@material-ui/core/TextField\";\nimport configReducer from \"../Reducers/ConfigReducer\";\nimport SystemConfig from \"../Component/SystemConfig\";\nimport AlertDialog from \"../Component/AlertDialog\";\n\n\n//==================================== Styles ========================================================================//\nconst styles = theme => ({\n    root: {\n        height: \"100vh\",\n        overflow: \"scroll\",\n        paddingTop: theme.spacing(2),\n    },\n    fullHeight: {\n        height: '100%'\n    },\n    textBold: {\n        fontWeight: '600'\n    },\n    textCenter: {\n        textAlign: 'center'\n    },\n    graphContainer: {\n        position: 'relative'\n    },\n    textRight: {\n        textAlign: \"right\"\n    },\n    button: {\n        minHeight: 60,\n        minWidth: 160\n    },\n    tabText: {\n        fontSize: \"xx-large\"\n    },\n    marginLeft: {\n        marginLeft: 16\n    }\n});\n\n//==================================== Class definition ==============================================================//\nclass ConfigPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handlerFormChange = this.handlerFormChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.fetchStatus();\n        this.props.configFormSelect(1);\n    }\n\n    componentWillMount() {\n        this.props.getConfig();\n    }\n\n    handleChange(event, newValue) {\n        if (newValue !== 0) {\n            this.props.configFormSelect(newValue);\n        }\n        this.setState({\n            tabIndex: newValue\n        });\n    };\n\n    handlerFormChange(event) {\n        const {name, value} = event.target;\n        this.props.configFormChange(name, value);\n    }\n\n    render() {\n        const {classes, form, job} = this.props;\n        return (\n            <Box className={classes.root}>\n                <Container maxWidth=\"xl\" style={{marginBottom: 16}}>\n                    <Typography variant=\"h2\" gutterBottom>\n                        System config\n                    </Typography>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <LineConfig form={form}\n                                                onChange={this.handlerFormChange}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <ActualConfig form={form}\n                                                  data={job}\n                                                  onChange={this.handlerFormChange}\n                                                  onSubmit={this.props.setActual}\n                                    />\n\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <DateTimeConfig form={form}\n                                                    onChange={this.handlerFormChange}\n                                                    onSubmit={this.props.setDateTime}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <BreakTimeConfig form={form}\n                                                     onChange={(name, type, idx, value) => this.props.configTimeChange(name, type, idx, value)}/>\n                                </Grid>\n                                <Grid item xs={12} className={classes.textRight}>\n                                    <Button variant=\"contained\"\n                                            color=\"secondary\"\n                                            className={classes.button}\n                                            startIcon={<SaveIcon style={{fontSize: 40}}/>}\n                                            onClick={this.props.saveConfigInstant}\n                                    >\n                                        SAVE CHANGE\n                                    </Button>\n                                    <Button variant=\"contained\"\n                                            color=\"primary\"\n                                            className={clsx(classes.button, classes.marginLeft)}\n                                            startIcon={<HomeIcon style={{fontSize: 40}}/>}\n                                            onClick={() => this.props.history.replace('/single_display')}\n                                    >\n                                        HOME\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                    </Grid>\n                </Container>\n                <AlertDialog open={this.props.successDialog || this.props.failureDialog}\n                             maxWidth={'xs'}\n                             title={this.props.dialogTitle}\n                             message={this.props.dialogMessage}\n                             onClose={() => {\n                                 if (this.props.successDialog) {\n                                     this.props.cmdSuccessDialog(false);\n                                 } else {\n                                     this.props.cmdErrorDialog(false);\n\n                                 }\n                             }}\n                />\n            </Box>\n        );\n    }\n}\n\n//==================================== Component props ===============================================================//\n\n//==================================== Redux map props ===============================================================//\nconst mapStateToProps = ({jobReducer, configReducer}) => ({\n    job: jobReducer.entities.line1,\n    form: configReducer.infoForm,\n    currentIns: configReducer.currentIns,\n    successDialog: configReducer.dialog.success,\n    failureDialog: configReducer.dialog.failure,\n    dialogTitle: configReducer.dialog.title,\n    dialogMessage: configReducer.dialog.message,\n})\n//==================================== Export ========================================================================//\nexport default connect(mapStateToProps, {\n    configFormSelect,\n    configFormChange,\n    configTimeChange,\n    getConfig,\n    saveConfig,\n    cmdSuccessDialog,\n    cmdErrorDialog,\n    saveConfigInstant,\n    fetchStatus,\n    setActual,\n    setDateTime\n})(withStyles(styles)(withRouter(ConfigPage)));\n\n\n\n","import React from 'react';\r\nimport DisplayPage from './Pages/Display';\r\nimport GraphPage from './Pages/Graph';\r\nimport ConfigPage from \"./Pages/Config\";\r\nimport DisplayApp from \"./Pages/DisplayApp\";\r\nimport SingleDisplay from \"./Pages/SingleDisplay\"\r\nimport SingleConfig from \"./Pages/SingleConfig\";\r\n\r\nconst route = {\r\n    publicRoute: [\r\n        { path: '/display', exact: true, name: 'display', component: DisplayApp},\r\n        { path: '/single_display', exact: true, name: 'singleDisplay', component: SingleDisplay},\r\n        { path: '/single_config', exact: true, name: 'singleConfig', component: SingleConfig},\r\n        // { path: '/graph', exact: true, name: 'graph', component: GraphPage},\r\n        { path: '/config', exact: true, name: 'config', component: ConfigPage},\r\n\r\n    ],\r\n    privateRoute: [\r\n    ]\r\n} ;\r\n\r\nexport default route;\r\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Switch, Route, Redirect, HashRouter} from 'react-router-dom';\nimport {connect} from \"react-redux\";\n//==================================== MUI-IMPORT ====================================================================//\n//==================================== Icon ==========================================================================//\n//==================================== App component =================================================================//\n//==================================== Utility =======================================================================//\nimport routes from \"./route\";\nimport moment from \"moment\";\n//==================================== Redux action ==================================================================//\n//==================================== Styles ========================================================================//\nconst styles = theme => ({\n\n});\n//==================================== Class definition ==============================================================//\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.timer = null;\n        this.switchTimer = null;\n        this.state = {\n            currentTime: '',\n            currentPath: '/display'\n        }\n    }\n\n    render() {\n        const publicMenu = routes.publicRoute.map((route, index) => {\n            return (route.component) ? (\n                <Route\n                    key={index}\n                    path={route.path}\n                    exact={route.exact}\n                    name={route.name}\n                    render={props => (\n                        <route.component {...props} />\n                    )}/>\n            ) : null;\n        });\n        return (\n            <HashRouter>\n                <Switch>\n                    <Redirect exact from='/' to='/single_display'/>\n                    {publicMenu}\n                </Switch>\n            </HashRouter>\n        )\n    }\n}\n//==================================== Component props ===============================================================//\n\n//==================================== Redux map props ===============================================================//\nconst mapStateToProps = ({rootReducer, configReducer}) => {\n    return {\n\n    };\n};\n\n//==================================== Export ========================================================================//\n\nexport default connect(mapStateToProps, {})(App);\n\n\n\n","import {SWITCH_PAGE} from \"../Action/types\";\n\nconst INIT_STATE = {\n    auth: false,\n    currentPage: '/'\n};\n\nexport default (state = INIT_STATE, action) => {\n    let newState = {...state};\n    const {payload} = action;\n    switch (action.type) {\n        case SWITCH_PAGE:\n            newState.currentPage = payload\n            break;\n        default:\n            break;\n    }\n    return newState;\n}\n","import camelcaseKeysDeep from 'camelcase-keys-deep';\nimport {\n    FETCH_STATUS_ACTION_FAIL,\n    FETCH_STATUS_ACTION_SUCCESS,\n    FETCH_STATUS_STATE\n} from \"../Action/types\";\n\n\nconst INIT_STATE = {\n    entities: {\n        line1: {\n            name: \"LINE 1\",\n            target: 0,\n            result: 0,\n            ppPlan: 0,\n            actual: 0,\n            att: 0,\n            lossTime: \"00:00:00\",\n            tt: 0,\n            graph: {\n                \"08:00\": 0,\n                \"08:30\": 0,\n                \"09:00\": 0,\n                \"09:30\": 0,\n                \"10:00\": 0,\n                \"10:30\": 0,\n                \"11:00\": 0,\n                \"11:30\": 0,\n                \"12:00\": 0,\n                \"12:30\": 0,\n                \"13:00\": 0,\n                \"13:30\": 0,\n                \"14:00\": 0,\n                \"14:30\": 0,\n                \"15:00\": 0,\n                \"15:30\": 0,\n                \"16:00\": 0,\n                \"16:30\": 0,\n                \"17:00\": 0,\n                \"17:30\": 0,\n                \"18:00\": 0,\n                \"18:30\": 0,\n                \"19:00\": 0,\n                \"19:30\": 0,\n            }\n        },\n        line2: {\n            name: \"LINE 1\",\n            target: 0,\n            result: 0,\n            ppPlan: 0,\n            actual: 0,\n            att: 0,\n            lossTime: \"00:00:00\",\n            tt: 0,\n            graph: {\n                \"08:00\": 0,\n                \"08:30\": 0,\n                \"09:00\": 0,\n                \"09:30\": 0,\n                \"10:00\": 0,\n                \"10:30\": 0,\n                \"11:00\": 0,\n                \"11:30\": 0,\n                \"12:00\": 0,\n                \"12:30\": 0,\n                \"13:00\": 0,\n                \"13:30\": 0,\n                \"14:00\": 0,\n                \"14:30\": 0,\n                \"15:00\": 0,\n                \"15:30\": 0,\n                \"16:00\": 0,\n                \"16:30\": 0,\n                \"17:00\": 0,\n                \"17:30\": 0,\n                \"18:00\": 0,\n                \"18:30\": 0,\n                \"19:00\": 0,\n                \"19:30\": 0,\n            }\n        }\n    }\n};\nconst sortGraph = (data) => {\n  const arr = []\n  Object.keys(data).map(x => arr.push({\n      key: x,\n      data: data[x]\n  }));\n  const sortData = [\n      ...arr.slice(16, arr.length),\n      ...arr.slice(0, 16)\n  ];\n  const entities = {};\n  sortData.map(x => entities[x.key] = x.data);\n  return entities;\n};\n\nexport default (state = INIT_STATE, action) => {\n    let newState = {...state};\n    const {payload} = action;\n    switch (action.type) {\n        case FETCH_STATUS_ACTION_SUCCESS:\n            switch (payload.last) {\n                case FETCH_STATUS_STATE:\n                    const lineData = camelcaseKeysDeep(payload.result.data);\n                    newState.entities = {\n                        line1: {\n                            name: \"MOR\",\n                            ...lineData[0],\n                            graph: lineData[0].lineGraph\n                        },\n                        line2: {\n                            name: \"LOR\",\n                            ...lineData[1],\n                            graph: lineData[1].lineGraph\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case FETCH_STATUS_ACTION_FAIL:\n            switch (payload.last) {\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return newState;\n}\n","import {combineReducers} from \"redux\";\nimport rootReducer from \"./RootReducer\";\nimport jobReducer from \"./JobReducer\";\nimport configReducer from \"./ConfigReducer\";\n\nconst reducers = combineReducers({\n    rootReducer,\n    jobReducer,\n    configReducer\n});\n\nexport default reducers\n","import axios from 'axios';\n\n// const selectHost = 'http://homecloud.p-enterprise.com:8081/';\n// const selectHost = 'http://localhost:8080/';\nconst selectHost = 'http://172.16.1.162:8080/';\n// const selectHost = 'http://108biz.trueddns.com:42736/api';\n// const origin = window.location.origin;\nconst apiOrigin = axios.create({\n    baseURL: origin,\n    timeout: 5000\n});\n\nconst backendConfig = {\n    server: selectHost,\n    clientId: '',\n    clientSecrect: ''\n};\n\nif (process.env.NODE_ENV === 'production') {\n    // We are running in production mode\n    backendConfig.server = window.location.origin + '/api';\n    backendConfig.clientId = \"\";\n    backendConfig.clientSecrect = \"\";\n} else {\n    backendConfig.server = selectHost;\n}\n\nexport {\n    backendConfig\n    // apiOrigin\n};\n\nexport default axios.create({\n    baseURL: backendConfig.server,\n    timeout: 5000\n});\n","import {all, call, fork, put, takeEvery, takeLatest, debounce, select, throttle} from 'redux-saga/effects';\nimport api from '../Api/httpClient';\nimport qs from \"qs\";\n//==================================== EVENT /ACTION =================================================================//\nimport {\n    FETCH_STATUS_STATE\n} from \"../Action/types\";\nimport {\n    actionFetchStatusFail,\n    actionFetchStatusSuccess\n} from \"../Action\";\n//==================================== API ENDPOINT DEFINITION =======================================================//\nconst endPoint = '';\n//==================================== MODEL FORMAT ROUTINE ==========================================================//\n//==================================== CREATE ROUTINE ================================================================//\n//==================================== READ ROUTINE ==================================================================//\nfunction* fetchStatus() {\n    try {\n        const response = yield call(async () => {\n            const req = await api.get('state', {});\n            return req.data;\n        }, );\n        yield put(actionFetchStatusSuccess({result: response, last: FETCH_STATUS_STATE}));\n    } catch (error) {\n        yield put(actionFetchStatusFail({payload: error.toString(), last: FETCH_STATUS_STATE}));\n    }\n}\n//==================================== UPDATE ROUTINE ================================================================//\n//==================================== DELETE ROUTINE ================================================================//\n//==================================== EXTRA ROUTINE =================================================================//\n//==================================== VALIDATE ROUTINE ==============================================================//\n//==================================== WATCHER / TASK ================================================================//\nexport default function* rootSaga() {\n    yield all([\n        fork(function* () {\n            yield takeLatest(FETCH_STATUS_STATE, fetchStatus);\n        }),\n\n    ]);\n}\n","import {all, call, fork, put, takeEvery, takeLatest, debounce, select, throttle} from 'redux-saga/effects';\nimport api from '../Api/httpClient';\nimport axios from \"axios\";\nimport qs from \"qs\";\n//==================================== EVENT /ACTION =================================================================//\nimport {\n    GET_CONFIG_FORM,\n    SAVE_CONFIG,\n    SAVE_CONFIG_INSTANT,\n    SET_ACTUAL,\n    SET_DATE_TIME,\n} from \"../Action/types\";\nimport {\n    actionFetchStatusFail,\n    actionFetchStatusSuccess,\n    cmdSuccessDialog,\n    cmdErrorDialog,\n    configFormSelect\n} from \"../Action\";\n//==================================== API ENDPOINT DEFINITION =======================================================//\nconst endPoint = '';\n//==================================== MODEL FORMAT ROUTINE ==========================================================//\n//==================================== CREATE ROUTINE ================================================================//\n//==================================== READ ROUTINE ==================================================================//\nfunction* fetchConfig() {\n    try {\n        const response = yield call(async () => {\n            const req = await api.get('config', {});\n            return req.data;\n        }, );\n        yield put(actionFetchStatusSuccess({result: response, last: GET_CONFIG_FORM}));\n        yield put(configFormSelect(1));\n    } catch (error) {\n        yield put(actionFetchStatusFail({payload: error.toString(), last: GET_CONFIG_FORM}));\n    }\n}\n//==================================== UPDATE ROUTINE ================================================================//\nfunction* saveConfig() {\n    try {\n        let state = yield select((state) => state.configReducer);\n        const {infoForm} = state;\n        const response = yield call(async () => {\n            const req = await api.put('config', {\n                line_name: infoForm.lineName,\n                switch_time: infoForm.switchTime\n            }, {\n                params: {\n                    type: \"system\"\n                }\n            });\n            return req.data;\n        }, );\n        yield put(actionFetchStatusSuccess({result: response, last: SAVE_CONFIG}));\n        yield put(cmdSuccessDialog(true, \"Result\", \"Operation success!!!!\"));\n        yield call(fetchConfig);\n\n    } catch (error) {\n        yield put(actionFetchStatusFail({payload: error.toString(), last: SAVE_CONFIG}));\n        yield put(cmdErrorDialog(true, \"Result\", \"Operation Failure!!!!\"))\n    }\n}\n\nfunction* saveConfigIns() {\n    try {\n        let state = yield select((state) => state.configReducer);\n        const {infoForm, currentIns} = state;\n        const response = yield call(async () => {\n            const req = await api.put('config', {\n                line_name: infoForm.lineName,\n                threashold: parseInt(infoForm.threashold),\n                tt: infoForm.tt,\n                cpc: parseInt(infoForm.cpc),\n                reset_time: infoForm.resetTime,\n                reset_nighttime: infoForm.resetNighttime,\n                daytime_start: infoForm.daytimeStart,\n                nighttime_start: infoForm.nighttimeStart,\n                daytime: infoForm.daytime,\n                nighttime: infoForm.nighttime,\n                short_break_down_threshold: infoForm.shortBreakDownThreshold,\n                break_down_threshold: infoForm.breakDownThreshold,\n                meeting_threshold: infoForm.meetingThreshold\n            }, {\n                params: {\n                    type: \"ins\",\n                    select: currentIns\n                }\n            });\n            return req.data;\n        }, );\n        yield put(actionFetchStatusSuccess({result: response, last: SAVE_CONFIG_INSTANT}));\n        yield put(cmdSuccessDialog(true, \"Result\", \"Operation success!!!!\"));\n        yield call(fetchConfig);\n\n    } catch (error) {\n        yield put(actionFetchStatusFail({payload: error.toString(), last: SAVE_CONFIG_INSTANT}));\n        yield put(cmdErrorDialog(true, \"Result\", \"Operation Failure!!!!\"))\n    }\n}\n\nfunction* setActual() {\n    try {\n        let state = yield select((state) => state.configReducer);\n        const {infoForm, currentIns} = state;\n        const response = yield call(async () => {\n            const req = await api.put('state', {\n                data: parseInt(infoForm.actual),\n            }, {\n                params: {\n                    select: currentIns\n                }\n            });\n            return req.data;\n        }, );\n        yield put(actionFetchStatusSuccess({result: response, last: SAVE_CONFIG_INSTANT}));\n        yield put(cmdSuccessDialog(true, \"Result\", \"Operation success!!!!\"));\n    } catch (error) {\n        yield put(actionFetchStatusFail({payload: error.toString(), last: SAVE_CONFIG_INSTANT}));\n        yield put(cmdErrorDialog(true, \"Result\", \"Operation Failure!!!!\"))\n    }\n}\n\nfunction* setDateTime() {\n    try {\n        let state = yield select((state) => state.configReducer);\n        const {infoForm, currentIns} = state;\n        const response = yield call(async () => {\n            const req = await api.put('set_time', {\n                time: `${infoForm.date} ${infoForm.time}`,\n            }, );\n            return req.data;\n        }, );\n        yield put(actionFetchStatusSuccess({result: response, last: SET_DATE_TIME}));\n        yield put(cmdSuccessDialog(true, \"Result\", \"Operation success!!!!\"));\n    } catch (error) {\n        yield put(actionFetchStatusFail({payload: error.toString(), last: SET_DATE_TIME}));\n        yield put(cmdErrorDialog(true, \"Result\", \"Operation Failure!!!!\"))\n    }\n}\n//==================================== DELETE ROUTINE ================================================================//\n//==================================== EXTRA ROUTINE =================================================================//\n//==================================== VALIDATE ROUTINE ==============================================================//\n//==================================== WATCHER / TASK ================================================================//\nexport default function* rootSaga() {\n    yield all([\n        fork(function* () {\n            yield throttle(2000, GET_CONFIG_FORM, fetchConfig);\n            yield throttle(2000, SAVE_CONFIG, saveConfig);\n            yield throttle(2000, SAVE_CONFIG_INSTANT, saveConfigIns);\n            yield throttle(2000, SET_ACTUAL, setActual)\n            yield throttle(2000, SET_DATE_TIME, setDateTime)\n        }),\n\n    ]);\n}\n","/**\n * Root Sagas\n */\nimport {all} from 'redux-saga/effects';\nimport jobsSaga from './jobsSagas';\nimport configSaga from './configSagas';\n\nexport default function* rootSaga() {\n    yield all([\n        jobsSaga(),\n        configSaga(),\n    ]);\n};\n","\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from '../Reducers';\nimport RootSaga from \"../Sagas\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware, ];\n\nexport function configureStore(initialState) {\n\n    const store = createStore(\n        reducers,\n        initialState,\n        composeWithDevTools(applyMiddleware(...middlewares),\n        )\n    );\n\n    store.runSagaTask = () => {\n        store.sagaTask = sagaMiddleware.run(RootSaga);\n    };\n\n    store.runSagaTask();\n\n    return store;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport {configureStore} from \"./Store\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={configureStore()}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}